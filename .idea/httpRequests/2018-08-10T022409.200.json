[
  {
    "nid": "8",
    "title": "How do I protect my investment in bespoke software?",
    "body": "<p>It’s not about money only. When we create something, we would like it not to go down the sink too quickly. Sure nothing lasts forever, but if what we create shows to be useful for as long as it can, all the better.<\/p>\n\n<p>How to do this when technologies crop up as quickly as mushrooms after a rain storm and disappear as quickly?<\/p>\n\n<p><strong>Software development is about problem solving<\/strong>. It isn’t about technologies.<\/p>\n\n<p>When you write a piece of software, you are describing a way to solve a problem.<\/p>\n\n<p>If you document it well and your description of how to solve a problem is clear enough, when you have to change programming language, framework, libraries, or need to use the newest flavour of JavaScript, you have documented solutions that you can reuse.<\/p>\n\n<p>You don’t need to throw everything away.<\/p>\n\n<p>A well-documented and well-structured software not only is easier to modify, adapt and troubleshoot. It protects your investment because it documents a solution that is technology independent.<\/p>\n\n<p>When you switch to a new technology, that solution comes with you.<\/p>",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/How_do_I_protect_my_investment_in_bespoke_software.jpg"
  },
  {
    "nid": "7",
    "title": "How do I create my application?",
    "body": "<p>What if you ask for my help? I created applications for: IBM, Intel Corporation, the Olympus satellite project, major telecommunication and energy companies, industrial plants, Virtual ISPs, banks and credit card companies.<\/p>\n\n<p>Sure, keep in mind that the age of the requirements sculpted in stone has long gone.<\/p>\n\n<p>Even before the <a href="
    http:
    \
    /
    \
    /agilemanifesto.org
    \
    /
    ">agile manifesto<\/a> I was changing, re-writing or even ignoring analysis documents written by world-renowned consulting firms.<\/p>\n\n<p>Now you write a page of requirements and create a working prototype. That prototype will inspire you to make changes or add functions that you couldn’t even think of when you were writing the requirements.<\/p>\n\n<p>Get inspired by <a href="
    http:
    \
    /
    \
    /gettingreal.37signals.com
    \
    /
    ">Getting Real<\/a> for your next application. There you find a modern way of making software.<\/p>\n\n<p>Software creation is problem solving. When you solve a problem you end up with a sequence of steps to be followed to solve the problem. The programming language you use doesn’t matter. What matters is something that matters every time you want to solve a problem. The sequence of steps has to be very clear and easy to understand.<\/p>\n\n<p>If I want to solve the problem of going to Paris, I may say:<\/p>\n\n<ol><li>go to the St. Pancreas railway station<\/li>\n\t<li>take the train<\/li>\n<\/ol><p>You may say that something is missing, I need a ticket.<\/p>\n\n<p>And I reply that this is implied in the step no. 1. You will say that this can’t be. Step no. 1 is only about going to the railway station. The purchase of a ticket can’t be implied. You are right. Step no. 1 can’t include something that is not explicitly declared otherwise it’s a mess.<\/p>\n\n<p>The problem solving sequence gets confusing and improvements and troubleshooting gets hard to do. Unfortunately this scenario happens very often when writing software.<\/p>",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/How%20do%20I%20create%20my%20application%3F.jpg"
  },
  {
    "nid": "6",
    "title": "How do I make my application easy to manage in production?",
    "body": "<p>When you are in production, you don’t have much time to fix bugs. If you are slow, you lose money and people remember that your website didn’t work and don’t come back.<\/p>\n\n<p><strong>You don’t have time to understand cryptic error messages or to guess what to do to fix them<\/strong>.<\/p>\n\n<p>You don’t have time to understand what a function does or what a variable contains. The original developer may be on holiday or she may not be able to remember what that variable was about if its name doesn’t help.<\/p>\n\n<p>A good structure helps too. If the software is easy to browse, errors are easier to find.<\/p>\n\n<p>A production manual is a good idea.<\/p>\n\n<p>I was managing a team whose goal was to design the production activities to be performed on a group of servers delivering virtual ISP services.<\/p>\n\n<p>I knew that a production manual was what we needed to ensure a smooth operation.<\/p>\n\n<p>Every event was documented in the manual along with it’s troubleshooting measures and the log of every case of occurrence.<\/p>\n\n<p>In many cases I have written such a high quality software that production was going on event-less. This is the case of my PLC software and the software I have written for Intel Corporation.<\/p>",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/How_do_I_make_my_application_easy_to_manage_in_production.jpg"
  }
]