[
  {
    "nid": "90",
    "title": "PHP tutorial, how to make your code beautiful using photography composition rules",
    "body": "<p dir="
    ltr
    ">A PHP tutorial about how photography composition rules can help make PHP code easy and beautiful to read and more valuable.<\/p>\n\n<p dir="
    ltr
    ">This is what I want to talk about in this article.<\/p>\n\n<p dir="
    ltr
    ">Browsing the web I have found an <a href="
    http:
    \
    /
    \
    /www.photographymad.com
    \
    /pages
    \
    /view
    \
    /10-top-photography-composition-rules
    ">article<\/a> that describes some rules that photographers use to make photos more beautiful.<\/p>\n\n<p dir="
    ltr
    ">I have asked myself if and how PHP coding can benefit from these rules as well.<\/p>\n\n<p dir="
    ltr
    ">The result of my brainwork follows.<\/p>\n\n<h2 dir="
    ltr
    ">Art helps art<\/h2>\n\n<p dir="
    ltr
    ">I have already talked about software creation as art in my article about <a href="
    http:
    \
    /
    \
    /emanuelesantanche.com
    \
    /php-frameworks-how-to-choose
    \
    /
    ">PHP frameworks<\/a>.<\/p>\n\n<p dir="
    ltr
    ">Photography is art as well; how can it be of help to the art of software creation?<\/p>\n\n<p dir="
    ltr
    ">If you are a beginner photographer, if you follow some rules when you are composing a photo, you create more beautiful photos.<\/p>\n\n<p dir="
    ltr
    ">To compose a photo means to choose the point from where you will shoot the photo, which subjects to include, what to give prominence to and to make many other choices.<\/p>\n\n<p dir="
    ltr
    "><strong>When creating software, if we create beautiful software, we enjoy this beauty as we enjoy the beauty of a photo. Furthermore, our software will be more durable and valuable<\/strong>.<\/p>\n\n<p dir="
    ltr
    ">While a photo is static, software is a living thing. It will benefit from its beauty because it will be easier to change and to adapt to the unavoidable changing of requirements.<\/p>\n\n<p dir="
    ltr
    ">Now let’s see how we can use rules borrowed from photography to make our code look better.<\/p>\n\n<h2 dir="
    ltr
    ">The rule of thirds<\/h2>\n\n<p dir="
    ltr
    ">In photography this rule is about not putting the most important subject at the centre of the photo. We don’t want our photo to look like a mugshot. We want to make the photo lighter by giving space to other subjects of minor importance.<\/p>\n\n<p dir="
    ltr
    ">Writing software we can do the same thing. Actually we do it all the time. We don’t put all the important code in a single file. <strong>We balance the code among many files<\/strong>. Doing this our composition is lighter. It isn’t burdened by the presence of a single heavy file full of critical code.<\/p>\n\n<h2 dir="
    ltr
    ">Leading Lines<\/h2>\n\n<p dir="
    ltr
    ">The rule of thirds wasn’t much of a surprise for me. When developing software we use the same rule all the time. The rule of leading lines, instead, has been a surprise because it has given me a new idea to use to make my code better.<\/p>\n\n<p dir="
    ltr
    ">When we look at a photo, our eyes are naturally captured by lines. Placing lines differently in a photo, we can change how we view the photo. A photo will draw our look differently if the lines run from left to right or from top to bottom.<\/p>\n\n<p dir="
    ltr
    ">How do I see lines in PHP code? I see lines of execution. Let me explain.<\/p>\n\n<p dir="
    ltr
    ">When we create a program, we aim to build a functionality. We imagine the software’s user typing some information and getting the wanted result, so we hope.<\/p>\n\n<p dir="
    ltr
    ">We imagine the user typing some typical information.<\/p>\n\n<p dir="
    ltr
    ">But a user might type atypical information as well. They might type a name where a number is required, and so on.<\/p>\n\n<p dir="
    ltr
    "><strong>Our execution line is disturbed by many exceptions and special cases<\/strong>.<\/p>\n\n<p dir="
    ltr
    ">This way our look can’t benefit from following the leading line of execution. There are branches and bushes all around.<\/p>\n\n<p dir="
    ltr
    "><strong>It could be a good idea to highlight the main execution line using custom colours for syntax highlighting<\/strong>. Many <a href="
    http:
    \
    /
    \
    /emanuelesantanche.com
    \
    /php-ide-comprehensive-facilities-for-php-programmers
    \
    /
    ">PHP IDEs<\/a> allow customization of syntax highlighting.<\/p>\n\n<p dir="
    ltr
    ">We could use lighter colours for the parts of code that disturb the main execution line.<\/p>\n\n<h2 dir="
    ltr
    ">Symmetry and Patterns<\/h2>\n\n<p dir="
    ltr
    ">Photos portraying symmetrical objects or patterns can make for a very eye-catching composition.<\/p>\n\n<p dir="
    ltr
    "><strong>In software we can introduce symmetry in our name conventions and in the organization of files<\/strong>. Patterns of code (we can call them templates as well) can be used to reduce building time and the probability of mistakes.<\/p>\n\n<p dir="
    ltr
    ">Using symmetry and patterns, code can be read and understood in less time.<\/p>\n\n<h2 dir="
    ltr
    ">Viewpoint<\/h2>\n\n<p dir="
    ltr
    ">This is easy. Change the viewpoint and you change a photo dramatically.<\/p>\n\n<p dir="
    ltr
    "><strong>We humans have this wonderful feature that we each see the world in his or her own way<\/strong>. When we want to standardise people, we destroy this diversity. It’s a bit like destroying a tropical forest or making a rare species become extinct.<\/p>\n\n<p dir="
    ltr
    ">On the other hand, it’s smarter to take advantage of this diversity. It can bring a richness of solutions and ideas.<\/p>\n\n<h2 dir="
    ltr
    ">Background<\/h2>\n\n<p dir="
    ltr
    ">Sometimes you want to take a shot of a subject and you don’t want the background to detract from it. Your photo would lack impact if the background is too busy.<\/p>\n\n<p dir="
    ltr
    ">When writing a PHP script, it may happen that the most important step is blended among many other less important ones.<\/p>\n\n<p dir="
    ltr
    ">To prevent this busy background of steps from detracting from the main one, <strong>it’s a good idea to merge the steps coming before the main one in a single “pre” function. The steps coming after can go into a “post” function<\/strong>.<\/p>\n\n<p dir="
    ltr
    ">For instance, if you have to run a query against a database, the most important step is the query itself. So you can group all the preparatory steps in a function and, similarly, all the closing steps in a another function.<\/p>\n\n<p dir="
    ltr
    ">This will highlight the main step, which is the query.<\/p>\n\n<h2 dir="
    ltr
    ">Depth<\/h2>\n\n<p dir="
    ltr
    ">Photos are two-dimensional. How do you convey a sense of depth using a two-dimensional medium?<\/p>\n\n<p dir="
    ltr
    ">You include in your photo objects which are near you, at a medium distance and far away.<\/p>\n\n<p dir="
    ltr
    "><strong>You use this idea when writing software by creating functions which break down a task in more and more detailed levels<\/strong>.<\/p>\n\n<p dir="
    ltr
    ">You write a function that calls three other functions which each call another three functions, and so on until you get to the lowest level of detail.<\/p>\n\n<p dir="
    ltr
    ">It may seem that to write a single function at greater length and in more detail may be better. Instead, it adds beauty, and reading easiness, to your code if you add depth to it.<\/p>\n\n<h2 dir="
    ltr
    ">Framing<\/h2>\n\n<p dir="
    ltr
    ">Objects such as trees, archways and holes create frames around a subject, thus creating a focused image.<\/p>\n\n<p dir="
    ltr
    "><strong>Developing PHP code, we have PHP frameworks. They create a frame around our code<\/strong>. They take care of basic functionalities and design choices so that we can focus on the high level functionalities we need to create.<\/p>\n\n<h2 dir="
    ltr
    ">Cropping<\/h2>\n\n<p dir="
    ltr
    ">You crop a photo if you want to draw attention to a detail. You crop tight around it to prevent it from drowning in a sea of other subjects.<\/p>\n\n<p dir="
    ltr
    "><strong>In your PHP code there might be details that you want to examine more closely now and then. You can tag them<\/strong>. I use the tag FIXME a lot. I have even defined a keyboard shortcut to insert it where I need it.<\/p>\n\n<p dir="
    ltr
    ">I use it to remind myself which parts of my code need more work.<\/p>\n\n<p dir="
    ltr
    ">You can define a tag and use it to mark all the code that needs to be changed to introduce or modify a functionality. Later, you make the changes and delete the tags.<\/p>\n\n<p dir="
    ltr
    ">Using a PHP IDE, you can define a custom syntax highlighting which you switch on when you want to examine code lines which have been given a tag.<\/p>\n\n<p dir="
    ltr
    ">Let’s call this “code cropping”.<\/p>\n\n<h2 dir="
    ltr
    ">Experimentation<\/h2>\n\n<p dir="
    ltr
    ">Rules are made to be broken in PHP code writing as well as in photography.<\/p>\n\n<p dir="
    ltr
    ">A rule has to make sense for it to add beauty and value to your code. Don’t apply them blindly otherwise you may end up doing more harm than good.<\/p>\n\n<h2 dir="
    ltr
    ">Conclusion<\/h2>\n\n<p dir="
    ltr
    ">This experiment of borrowing creative practices from photography seems to have produced interesting results.<\/p>\n\n<p dir="
    ltr
    "><strong>They will help to write more beautiful and valuable software<\/strong>.<\/p>\n\n<p dir="
    ltr
    ">I don’t recommend using these techniques when writing a prototype. When your software still needs to find a final form, it’s better to write prototypes to showcase basic functionalities.<\/p>\n\n<p dir="
    ltr
    ">At this stage of software creation we don’t need to care about the beauty in our code. We want to create it fast and use it to stimulate the development of more complete and stable requirements.<\/p>\n\n<p dir="
    ltr
    ">So, at this stage, our software doesn’t need to be beautiful because that would be a waste. We will destroy this software once it has accomplished its function.<\/p>\n\n<p dir="
    ltr
    ">When we have stable requirements, we can begin to create new software in a final form and then we need beautiful code because this software has to last and to be easily maintained.<\/p>",
    "langcode": "English",
    "field_ems_topic": "Talking about my experiences",
    "sticky": "Off",
    "field_image": "\/sites\/default\/files\/2018-08\/photographer.jpg"
  },
  {
    "nid": "89",
    "title": "Php editor, an indispensable tool",
    "body": "<p dir="
    ltr
    ">A php editor is a must-have tool for a php developer. Even if you are a beginner you need something more than a standard text editor when you write your php scripts.<\/p>\n\n<p dir="
    ltr
    ">A basic php editor offers many functionalities that help greatly and eliminate many distractions that make your creative efforts more difficult.<\/p>\n\n<p dir="
    ltr
    ">Let’s look at these basic functionalities.<\/p>\n\n<h3 dir="
    ltr
    ">Syntax highlighting<\/h3>\n\n<p dir="
    ltr
    ">Every language keyword is highlighted in a different colour. You will see that the keywords: if, switch, else, return, case, are rendered in a colour different from the ones used for other parts of your script.<\/p>\n\n<p dir="
    ltr
    ">You will know at first glance which keywords are standard parts of the php language and which ones are variables, strings or constants.<\/p>\n\n<h3 dir="
    ltr
    ">Auto-completion<\/h3>\n\n<p dir="
    ltr
    ">Just type the first letters of a keyword and you will be presented with a list of the keywords beginning with those letters. After you choose a keyword from this list, the editor will show information about that keyword. If the keyword you chose is the name of a function, the editor will show a description of the function and its parameters.<\/p>\n\n<h3 dir="
    ltr
    ">Snippets<\/h3>\n\n<p dir="
    ltr
    ">Just type “if” followed by the tab key, or other standard key, and you get the brackets automatically. Or just type “table” and you get the full structure of an html table.<\/p>\n\n<h3 dir="
    ltr
    ">Wizards<\/h3>\n\n<p dir="
    ltr
    ">Press a button and you will be guided through many dialogs that help you choose the parameters needed to write html, php or css constructs.<\/p>\n\n<h3 dir="
    ltr
    ">Symbol browser<\/h3>\n\n<p dir="
    ltr
    ">You want to modify a function but you can’t remember which file it is in. The symbol browser lists all your functions and takes you to where they are defined with just a click.<\/p>\n\n<h3 dir="
    ltr
    ">Search and replace in multiple files<\/h3>\n\n<p dir="
    ltr
    ">What if you have to change a name or a symbol used in many files? It happens more often than you might imagine.<\/p>\n\n<p dir="
    ltr
    ">Just tell the editor what you want to change and it will make the change in all the open files or even in an entire directory.<\/p>\n\n<p dir="
    ltr
    ">Let’s look at a few php editors.<\/p>\n\n<h2 dir="
    ltr
    ">Free php editors, multi-platform<\/h2>\n\n<p dir="
    ltr
    ">Let’s begin with free php editors, free as in free beer.<\/p>\n\n<p dir="
    ltr
    ">The following are also multi-platform. You can use them on Linux, Windows and Mac.<\/p>\n\n<h3 dir="
    ltr
    ">Geany<\/h3>\n\n<p dir="
    ltr
    "><a href="
    http:
    \
    /
    \
    /www.geany.org
    \
    /
    ">Geany<\/a> is a light editor, it’s fast and it does everything we need.<\/p>\n\n<p dir="
    ltr
    ">It highlights syntax. It’s possible to customise the colours used to highlight.<\/p>\n\n<p dir="
    ltr
    ">It auto-completes syntax keywords and shows the parameters to be given to a function. It doesn’t show information about what a function is for.<\/p>\n\n<p dir="
    ltr
    ">Snippets are supported and customisable. There are no wizards to insert html or css. There is a symbol browser instead, and you get the powerful search-and-replace function extended to all open files.<\/p>\n\n<p dir="
    ltr
    ">I’m writing about Geany here, on the php editor’s page because it’s so light that you can use it as your everyday text editor. At the same time <strong>it has functionalities that qualify it as a <a href="
    http:
    \
    /
    \
    /emanuelesantanche.com
    \
    /php-ide-comprehensive-facilities-for-php-programmers
    \
    /
    ">PHP IDE<\/a><\/strong>.<\/p>\n\n<p dir="
    ltr
    ">With Geany you can check the syntax of your php scripts and you can debug them as well.<\/p>\n\n<h3 dir="
    ltr
    ">Bluefish<\/h3>\n\n<p dir="
    ltr
    "><a href="
    http:
    \
    /
    \
    /bluefish.openoffice.nl
    \
    /index.html
    ">Bluefish<\/a> has the <strong>wizards<\/strong> that Geany lacks. I recommend Bluefish if you do a lot of html or css writing. Geany is better if you do more pure php scripting.<\/p>\n\n<p dir="
    ltr
    ">Bluefish features syntax highlighting and <strong>you can customise the colours used to highlight more easily<\/strong> than in Geany.<\/p>\n\n<p dir="
    ltr
    "><strong>Bluefish’s autocompletion is fully functional<\/strong>. It explains the function that you choose and its parameters. If you move your mouse over the name of a function, you get the description of it.<\/p>\n\n<p dir="
    ltr
    ">There is snippet support via a plugin and there are many wizards that help with writing html, css and php code.<\/p>\n\n<p dir="
    ltr
    "><strong>There is no symbol browser<\/strong>. Unlike Geany, <strong>Bluefish is a pure editor and hasn’t any IDE functionalities<\/strong>.<\/p>\n\n<h3 dir="
    ltr
    ">jEdit<\/h3>\n\n<p dir="
    ltr
    "><a href="
    http:
    \
    /
    \
    /www.jedit.org
    \
    /
    ">jEdit<\/a> is Java based. If you like the look and feel of Java applications, jEdit is for you.<\/p>\n\n<p dir="
    ltr
    "><strong>Autocompletion<\/strong> in jEdit has to be activated pressing CTRL+b, which is <strong>not so convenient<\/strong>.<\/p>\n\n<p dir="
    ltr
    ">Syntax is highlighted and colours are highly customisable.<\/p>\n\n<p dir="
    ltr
    "><strong>jEdit indents your code if it gets messed up<\/strong>. You have to configure this function a bit to make it work.<\/p>\n\n<p dir="
    ltr
    ">There are loads of <strong>plugins<\/strong> to implement a lot of functionalities. You can use snippets and even download them from a snippet repository.<\/p>\n\n<p dir="
    ltr
    ">What about a symbol browser? You have to use a plugin named CtagsInterface which is a bit buggy.<\/p>\n\n<p dir="
    ltr
    ">On the other hand, <strong>the search and replace function is great<\/strong>. It allows you to search and replace in all the open files and even in a directory.<\/p>\n\n<p dir="
    ltr
    ">There are no wizards.<\/p>\n\n<h3 dir="
    ltr
    ">Komodo Edit<\/h3>\n\n<p dir="
    ltr
    "><a href="
    http:
    \
    /
    \
    /www.activestate.com
    \
    /komodo-edit
    ">Komodo Edit\u003C\/a> is a younger brother of <a href="
    http:
    \
    /
    \
    /www.activestate.com
    \
    /komodo-ide
    ">Komodo IDE<\/a>. While the latter is a full PHP IDE, the former is a reduced version featuring editing functions only.<\/p>\n\n<p dir="
    ltr
    ">Komodo Edit is multi-platform but not Java based. It’s based instead on the same code used by Firefox.<\/p>\n\n<p dir="
    ltr
    ">It has customisable colour schemes and <strong>very good auto completion<\/strong> function. Syntax highlighting is easy to customise.<\/p>\n\n<p dir="
    ltr
    ">You can jump to the definition of a function when you find it called in your script. There isn’t a symbol browser.<\/p>\n\n<p dir="
    ltr
    ">It’s possible to search and replace a string in the current file, in all open files and in a directory.<\/p>\n\n<p dir="
    ltr
    ">Komodo offers <strong>syntax check<\/strong> performed in real-time.<\/p>\n\n<p dir="
    ltr
    ">There are a lot of useful snippets. <strong>Komodo is not as light as Geany<\/strong>. Anyway, if you like it, you will find yourself at home if you choose Komodo IDE as your PHP IDE.<\/p>\n\n<h2 dir="
    ltr
    ">Free php editors, Linux only<\/h2>\n\n<h3 dir="
    ltr
    ">Gphpedit<\/h3>\n\n<p dir="
    ltr
    "><a href="
    http:
    \
    /
    \
    /www.gphpedit.org
    \
    /
    ">Gphpedit<\/a> is even lighter than Geany, but it lacks many useful aspects.<\/p>\n\n<p dir="
    ltr
    ">You will find that Gphpedit and Geany are similar because the code they are based on is the same.<\/p>\n\n<p dir="
    ltr
    ">Gphpedit’s search functionalities are very basic while auto-completion is good. It doesn’t add parentheses and braces if you begin an if statement.<\/p>\n\n<p dir="
    ltr
    ">If you have php installed, Gphpedit will check the syntax of your code.<\/p>\n\n<p dir="
    ltr
    ">The symbol browser is the same as Geany. Snippets are not provided.<\/p>\n\n<p dir="
    ltr
    "><strong>Gphpedit could be a bit richer<\/strong> and focused on php support. It’s light, but Geany is light too and richer.<\/p>\n\n<h2 dir="
    ltr
    ">Free php editors, Windows only<\/h2>\n\n<h3 dir="
    ltr
    ">Notepad++<\/h3>\n\n<p dir="
    ltr
    "><a href="
    http:
    \
    /
    \
    /www.notepad-plus-plus.org
    \
    /
    ">Notepad++<\/a> lives in Windows only but it is based on the same Scintilla component used by Geany.<\/p>\n\n<p dir="
    ltr
    ">It offers customisable syntax highlighting. <strong>The customisation options will make the most exigent of developers happy<\/strong>.<\/p>\n\n<p dir="
    ltr
    ">Notepad++ offers auto completion function with word completion, function completion and  function parameters hint.<\/p>\n\n<p dir="
    ltr
    ">The interface is very customisable. When you have many open files, it may be not enough to have them open in different tabs, you may want to arrange the tabs according to your preferences.<\/p>\n\n<p dir="
    ltr
    ">You can search and replace in open files and even in directories.<\/p>\n\n<p dir="
    ltr
    ">The symbol browser is called Function List. Snippets are managed through plugins.<\/p>\n\n<p dir="
    ltr
    "><strong>Notepad++ is complete<\/strong>, only wizards are missing, but there are many other useful functionalities.<\/p>\n\n<h3 dir="
    ltr
    "\u003EDev-PHP Editor<\/h3>\n\n<p dir="
    ltr
    "><a href=\u0022http:\/\/devphp.sourceforge.net\/"
    >Dev-PHP<
    \
    /a>
    comes
    in
    two
    versions,
    editor
    and
    IDE.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Here
    I
    ’
    m
    going
    to
    review
    the
    editor
    version
    of
    Dev-PHP.
    It
    features
    configurable
    syntax
    highlighting.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Its
    auto
    completion
    function
    offers
    completion
    of
    function
    name
    and
    parameters
    hints.
    Wizards
    produce
    the
    code
    needed
    for
    loops
    or
    other
    constructs.
    Just
    fill
    in
    the
    variable
    parts.
    Code
    snippets
    are
    customisable.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >There
    is
    a
    symbol
    browser
    that
    helps
    to
    find
    your
    functions
    quickly.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >It
    ’
    s
    possible
    to
    search
    in
    all
    the
    open
    files
    and
    in
    directories.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Dev-PHP
    is
    more
    than
    an
    editor,
    it
    has
    <strong>IDE
    functionalities<
    \
    /strong>
    and
    it
    ’
    s
    quite
    complete.<
    \
    /p>
    \
    n
    \
    n<h2
    dir=
    "ltr"
    >Commercial
    php
    editors,
    Windows
    only<
    \
    /h2>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >DzSoft
    PHP
    Editor<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    ><a
    href=
    "http:\/\/www.dzsoft.com\/php-editor.html"
    >DzSoft
    PHP
    Editor<
    \
    /a>
    is
    actually
    a
    full
    IDE.
    You
    can
    run
    and
    syntax-check
    your
    code.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >As
    editor,
    it
    features
    a
    <strong>very
    good
    symbol
    browser<
    \
    /strong>
    similar
    to
    the
    one
    offered
    by
    Geany.
    It
    ’
    s
    also
    possible
    to
    jump
    to
    a
    function
    ’
    s
    definition
    from
    a
    line
    where
    it
    is
    called.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Syntax
    highlighting
    is
    present
    and
    customisable.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Auto-completion
    of
    function
    names
    and
    parameters
    hints
    are
    provided.
    However
    <strong>to
    complete
    a
    function
    ’
    s
    name
    you
    have
    to
    press
    ctrl
    +
    enter
    and
    choose
    the
    function
    from
    a
    list<
    \
    /strong>.
    You
    can
    type
    quickly
    the
    first
    3-4
    letters
    of
    the
    function
    ’
    s
    name
    and
    the
    editor
    will
    find
    the
    function.
    You
    don
    ’
    t
    get
    a
    description
    of
    the
    function
    or
    its
    parameters.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >There
    is
    the
    interesting
    possibility
    of
    choosing
    among
    <strong>many
    shortcut
    schemes<
    \
    /strong>.
    This
    is
    useful
    if
    you
    are
    accustomed
    to
    the
    shortcuts
    used
    in
    another
    editor.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >You
    can
    quickly
    insert
    snippets
    of
    code: here
    they
    are
    called
    code
    templates.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >It
    ’
    s
    possible
    to
    search
    all
    files
    in
    a
    directory,
    but
    there
    is
    no
    replace.
    Search
    and
    replace
    are
    fully
    supported
    only
    for
    the
    current
    file.<
    \
    /p>
    \
    n
    \
    n<h2
    dir=
    "ltr"
    >Conclusion<
    \
    /h2>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Personally,
    I
    prefer
    to
    stick
    to
    <strong>multi
    platform
    php
    editors<
    \
    /strong>
    because
    you
    never
    know
    if
    you
    will
    have
    to
    work
    on
    a
    Windows
    machine.
    Naturally
    I
    use
    Linux
    and
    LAMP
    platforms,
    but
    it
    may
    happen
    that
    I
    need
    to
    work
    on
    Windows
    machines
    and
    I
    want
    to
    use
    the
    same
    editor
    I
    use
    on
    Linux.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >I
    don
    ’
    t
    like
    the
    look
    and
    feel
    of
    Java
    applications
    and
    I
    prefer
    not
    to
    pay
    if
    there
    isn
    ’
    t
    a
    real
    need.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >So,
    I
    would
    have
    to
    choose
    between
    Geany,
    Bluefish
    and
    Komodo
    Edit.
    The
    latter
    isn
    ’
    t
    as
    light
    as
    Geany.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >I
    would
    use
    Bluefish
    for
    html
    \
    /css
    work
    and
    Geany
    for
    PHP.
    Geany
    is
    also
    IDE
    and
    it
    may
    offer
    enough
    functions
    to
    obviate
    the
    need
    to
    learn
    another
    IDE.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >If
    you
    work
    a
    lot
    on
    Windows
    computers,
    you
    can
    consider
    the
    Windows-only
    PHP
    editors
    I
    have
    reviewed
    above.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >I
    would
    choose
    Notepad
    +
    +
    if
    I
    want
    a
    pure
    php
    editor.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >If
    you
    want
    a
    PHP
    IDE
    running
    under
    Windows
    only,
    use
    Dev-PHP
    Editor.
    DzSoft
    PHP
    Editor
    ’
    s
    autocomplete
    function
    isn
    ’
    t
    so
    good<
    \
    /p>
    ","
    langcode
    ":"
    English
    ","
    field_ems_topic
    ":"
    Talking
    about
    my
    experiences
    ","
    sticky
    ":"
    Off
    ","
    field_image
    ":"
    \
    /sites
    \
    /default
    \
    /files
    \
    /2018-08
    \
    /PHP_Editor.jpg
    "},{"
    nid
    ":"
    88
    ","
    title
    ":"
    PHP
    IDE,
    comprehensive
    facilities
    for
    PHP
    programmers
    ","
    body
    ":"
    <p
    dir=
    "ltr"
    >A
    PHP
    IDE
    (<a
    href=
    "http:\/\/en.wikipedia.org\/wiki\/Integrated_development_environment"
    >Integrated
    Development
    Environment<
    \
    /a>)
    is
    a
    program
    which
    integrates
    many
    functionalities
    which
    help
    developers
    create
    quality
    code
    more
    quickly.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >I
    have
    reviewed
    many
    <a
    href=
    "http:\/\/emanuelesantanche.com\/php-editor-an-indispensable-tool\/"
    >PHP
    Editors<
    \
    /a>
    and
    explained
    why
    they
    are
    indispensable
    tools
    when
    creating
    PHP
    code.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >PHP
    Editors
    offer
    auto
    completion,
    syntax
    highlighting
    and
    symbol
    browsing.
    Some
    of
    them
    offer
    wizards
    that
    help
    with
    writing
    common
    code
    constructs.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >PHP
    IDEs
    take
    these
    functionalities
    to
    the
    next
    level
    and
    add
    more
    interesting
    ones.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >First,
    I
    will
    describe
    these
    functionalities.
    Later,
    I
    ’
    ll
    see
    how
    these
    functionalities
    are
    implemented
    in
    some
    PHP
    IDEs.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >Syntax
    checker<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >A
    good
    PHP
    IDE
    has
    to
    check
    your
    code
    ’
    s
    syntax
    by
    just
    pressing
    a
    button
    or,
    better,
    in
    real
    time.
    It
    ’
    s
    better
    if
    this
    happens
    automatically,
    without
    needing
    to
    configure
    it.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >Debugger<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >A
    debugger
    executes
    your
    code
    showing
    the
    result
    of
    its
    execution
    alongside
    the
    code
    itself.
    Obviously
    you
    can
    slow
    down
    the
    execution
    and
    stop
    it
    to
    take
    time
    to
    inspect
    variables
    and
    execution
    flow.
    The
    best
    PHP
    IDEs
    have
    an
    integrated
    debugger
    needing
    little
    set-up.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >Versioning
    System<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Generally,
    a
    PHP
    file
    is
    edited
    by
    one
    developer
    only.
    Sometimes
    two
    or
    more
    developers
    need
    to
    edit
    the
    same
    file.
    A
    versioning
    system
    makes
    this
    possible,
    avoiding
    conflicts
    or
    incongruent
    versions
    of
    the
    file.
    Such
    a
    system
    also
    keeps
    trace
    of
    every
    change
    made
    to
    a
    file
    along
    with
    its
    reason.
    This
    helps
    to
    solve
    problems
    caused
    by
    changes.
    <strong>A
    good
    PHP
    IDE
    supports
    many
    versioning
    systems
    without
    needing
    to
    install
    plugins
    or
    additional
    software<
    \
    /strong>.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >Refactoring<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >A
    developer
    has
    to
    make
    naming
    choices
    continuously.
    She
    has
    to
    give
    a
    name
    to
    variables,
    functions,
    files,
    classes,
    and
    so
    on.
    It
    may
    happen
    that
    some
    choices
    are
    revealed
    to
    be
    poor,
    conflicting
    or
    unclear.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >To
    remedy
    these
    problems
    is
    not
    simply
    an
    aesthetic
    pastime.
    A
    variable
    whose
    name
    has
    nothing
    to
    do
    with
    its
    content,
    can
    cause
    misunderstandings,
    mistakes
    and
    loss
    of
    time.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >PHP
    IDEs
    offer
    functionalities,
    which
    go
    under
    the
    name
    of
    refactoring,
    that
    globally
    change
    names
    to
    more
    meaningful
    ones.
    Attention
    has
    to
    be
    paid
    not
    to
    alter
    a
    code
    ’
    s
    behaviour.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Refactoring
    is
    not
    only
    about
    changing
    names.
    More
    advanced
    PHP
    IDEs
    have
    more
    sophisticated
    refactoring
    functionalities
    meant
    to
    <strong>improve
    code
    quality
    without
    altering
    its
    working<
    \
    /strong>.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >PHPdoc<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >If
    you
    write
    comments
    about
    functions
    following
    the
    PHPdoc
    standard,
    a
    tool
    named
    phpDocumentor
    will
    collect
    all
    the
    comments
    you
    have
    written
    and
    make
    an
    html
    documentation
    which
    is
    easy
    to
    navigate.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    ><strong>When
    you
    change
    a
    function,
    just
    change
    the
    comments
    about
    it
    and
    the
    documentation
    will
    be
    changed
    accordingly
    and
    automatically<
    \
    /strong>.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Every
    PHP
    project
    should
    have
    at
    least
    this
    sort
    of
    documentation,
    and
    a
    PHP
    IDE
    should
    support
    this.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >PHPUnit<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >This
    is
    less
    important.
    It
    ’
    s
    needed
    if
    you
    do
    test-driven
    development.
    This
    means
    that
    first
    you
    define
    a
    test
    which
    a
    piece
    of
    code
    has
    to
    pass
    to
    be
    declared
    functional,
    and
    then
    you
    write
    that
    code.
    PHPUnit
    is
    software
    which
    you
    have
    to
    install
    and
    which
    your
    PHP
    IDEs
    has
    to
    seamlessly
    interface.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >Integration
    with
    frameworks<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >If
    a
    PHP
    IDE
    somehow
    integrates
    with
    one
    or
    more
    PHP
    frameworks,
    it
    ’
    s
    a
    good
    plus.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Now
    I
    ’
    m
    going
    to
    review
    some
    PHP
    IDEs.
    They
    all
    will
    be
    <strong>multiplatform<
    \
    /strong>.
    <strong>You
    don
    ’
    t
    want
    to
    learn
    another
    PHP
    IDE
    if
    this
    means
    that
    you
    have
    to
    change
    platform<
    \
    /strong>.
    PHP
    IDEs
    need
    quite
    a
    lot
    of
    time
    to
    learn.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >Geany<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >I
    ’
    ve
    reviewed
    <a
    href=
    "http:\/\/www.geany.org\/"
    >Geany<
    \
    /a>
    as
    a
    PHP
    Editor.
    It
    has
    a
    few
    IDE
    functionalities
    as
    well.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >If
    you
    install
    the
    php
    interpreter
    on
    your
    computer,
    Geany
    will
    check
    the
    syntax
    of
    your
    code.
    Not
    in
    real
    time.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Using
    a
    plugin,
    Geany
    will
    interface
    your
    versioning
    system.
    You
    can
    interface
    Geany
    to
    <a
    href=
    "http:\/\/en.wikipedia.org\/wiki\/Apache_Subversion"
    >Subversion<
    \
    /a>
    (also
    named
    SVN).<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Unfortunately
    Geany
    doesn
    ’
    t
    work
    with
    xdebug
    or
    other
    php
    debugger.
    To
    debug
    your
    code
    you
    have
    to
    use
    echo,
    var_dump
    or
    similar
    commands.
    However,
    this
    way
    to
    debug
    php
    code
    is
    perfectly
    fine
    for
    small
    and
    medium
    projects.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >There
    is
    no
    integration
    with
    frameworks
    and
    forget
    about
    PHPUnit.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    ><strong>Geany
    is
    very
    light
    and
    good
    for
    small
    projects<
    \
    /strong>.<
    \
    /p>
    \
    n
    \
    n<h3
    dir=
    "ltr"
    >Netbeans<
    \
    /h3>
    \
    n
    \
    n<p
    dir=
    "ltr"
    ><a
    href=
    "https:\/\/netbeans.org\/"
    >Netbeans<
    \
    /a>
    is
    a
    java
    application.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >When
    I
    started
    it,
    I
    cringed
    when
    I
    saw
    the
    fonts
    it
    used.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Happily,
    I
    found
    that
    I
    could
    fix
    it.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Executing
    this
    command: <
    \
    /p>
    \
    n
    \
    n<blockquote>
    \
    n<p
    dir=
    "ltr"
    >export
    _JAVA_OPTIONS=
    ”
    -Dawt.useSystemAAFontSettings=on
    -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel
    ”
    <
    \
    /p>
    \
    n<
    \
    /blockquote>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Before
    running
    Netbeans,
    I
    instructed
    Java
    to
    use
    system
    fonts
    instead
    of
    its
    own.
    I
    also
    set
    the
    default
    look-and-feel
    to
    GTK,
    which
    looks
    much
    better
    than
    the
    standard
    one.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Doing
    this,
    Netbeans
    ’
    look-and-feel
    is
    acceptable.
    You
    can
    enjoy
    the
    functionalities
    and
    forget
    about
    the
    look-and-feel.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    ><strong>Netbeans
    checks
    your
    syntax
    in
    real
    time<
    \
    /strong>
    and
    without
    needing
    to
    configure
    anything.
    It
    gives
    you
    abundant
    hints
    about
    mistakes
    and
    keywords.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >Netbeans
    interfaces
    with
    the
    well-known,
    and
    widely-used,
    debugger
    Xdebug.
    You
    have
    just
    to
    do
    some
    configuration.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    ><strong>Support
    for
    versioning
    systems
    is
    integrated<
    \
    /strong>.
    Subversion,
    CVS
    and
    Mercurial
    are
    the
    versioning
    systems
    used.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    ><strong>Refactoring
    is
    a
    menu
    item<
    \
    /strong>.
    Ready
    to
    use
    straight
    out
    of
    the
    box.<
    \
    /p>
    \
    n
    \
    n<p
    dir=
    "ltr"
    >What
    about
    PHPdoc
    ?
    Just
    type
    “
    \/**” and hit Enter precisely before a function’s definition. Netbeans will create a PHPdoc compliant comment including the description of the function’s parameters. This is great.<\/p>\n\n<p dir="ltr">PHPUnit is supported.<\/p>\n\n<p dir="ltr">Netbeans will help you write code for these PHP frameworks: Zend, CakePHP, Yii, Symfony2, FuelPHP. Just install the specific plugin.<\/p>\n\n<h3 dir="ltr">Eclipse helios for php developers<\/h3>\n\n<p dir="ltr"><a href="http:\/\/www.eclipse.org\/downloads\/packages\/eclipse-php-developers\/heliosr">Eclipse<\/a> is the base for many other PHP IDEs. Here I’ll review the version of Eclipse named Helios and customised for PHP developers.<\/p>\n\n<p dir="ltr">Eclipse checks your syntax automatically in real time and nothing needs to be configured.<\/p>\n\n<p dir="ltr">Xdebug and Zend debugger are supported. The latter is very good.<\/p>\n\n<p dir="ltr"><strong>You can interface with a SVN repository by using a plugin named Subeclipse<\/strong> that you find in the menu item “Help -&gt; Eclipse Marketplace”.<\/p>\n\n<p dir="ltr">A couple of refactoring functions are offered via a menu item named Refactoring. Netbeans has more of them.<\/p>\n\n<p dir="ltr">When you type “\/**” and hit enter, the same miracle as with Netbeans occurs. You get a skeleton phpdoc comment with the parameters of your function. Just do it before a function’s definition.<\/p>\n\n<p dir="ltr">PHPUnit is supported and needs some configuration as it happens in Netbeans. This is expected as PHPUnit is an external product.<\/p>\n\n<p dir="ltr">Zend Framework is based on Eclipse and you can install software that enables Eclipse to create Zend projects.<\/p>\n\n<p dir="ltr">With some dirty tricks you can have at least autocompletion for the most common functions of any framework.<\/p>\n\n<h3 dir="ltr">Aptana Studio 3<\/h3>\n\n<p dir="ltr"><a href="http:\/\/www.aptana.org\/">Aptana Studio<\/a> is for <strong>Ajax applications<\/strong>. It’s a son of Eclipse and it’s fully customised to help build Ajax applications.<\/p>\n\n<p dir="ltr">So, you find <strong>great support for Javascript<\/strong>. There is even an integrated debugger for Javascript.<\/p>\n\n<p dir="ltr">Aptana isn’t only Javascript. It supports also HTML5, CSS3, Ruby, Rails, PHP and Python.<\/p>\n\n<p dir="ltr">There is no refactoring, PHPUnit and PHPDoc are supported. You can debug php code using the usual Xdebug if you install and configure it.<\/p>\n\n<h3 dir="ltr">PHPStorm<\/h3>\n\n<p dir="ltr"><a href="http:\/\/www.jetbrains.com\/phpstorm\/">PHPStorm<\/a> is a commercial product.<\/p>\n\n<p dir="ltr">Debugging for Javascript and PHP are integrated. No need to install anything.<\/p>\n\n<p dir="ltr">Versioning is well-supported. Many Version Control Systems are supported including Subversion, Mercurial, Git, Perforce, CVS, and TFS.<\/p>\n\n<p dir="ltr">Syntax checking is quite advanced and there are no problems with PHPUnit and PHPDoc.<\/p>\n\n<p dir="ltr">Even frameworks are supported out-of-the-box. There is integrated support for Symfony2, Yii and Zend.<\/p>\n\n<p dir="ltr"><strong>Refactoring functions are way more sophisticated than the ones featured by Netbeans or Eclipse<\/strong>.<\/p>\n\n<p dir="ltr">Be sure to run PHPStorm on a very powerful computer.<\/p>\n\n<h3 dir="ltr">Komodo IDE<\/h3>\n\n<p dir="ltr"><a href="https:\/\/www.activestate.com\/komodo-ide">Komodo IDE<\/a> is another commercial product. I have reviewed Komodo Edit, the free editor that is a simplified version of Komodo IDE.<\/p>\n\n<p dir="ltr"><strong>Komodo IDE shines for its debugging capabilities<\/strong>. You can even see inside what is transmitted between client and server via the http protocol! If there is no encryption you can see passwords travelling from your PC to the server!<\/p>\n\n<p dir="ltr">It supports not only the php language, but also javascript, css and html that are all needed to build web applications.<\/p>\n\n<p dir="ltr">Incredibly, <strong>refactoring functions are missing<\/strong>.<\/p>\n\n<h3 dir="ltr">Zend Studio<\/h3>\n\n<p dir="ltr"><a href="http:\/\/www.zend.com\/products\/studio\/">Zend Studio<\/a> is as elephant-like as Zend and both are commercial products.<\/p>\n\n<p dir="ltr">Zend Studio offers integrated, out-of-the-box debugging facilities for PHP and Javascript.<\/p>\n\n<p dir="ltr">Syntax highlighting and code auto completion are good at least for PHP and Javascript. They could be improved for html and css. There is real-time syntax checking.<\/p>\n\n<p dir="ltr"><strong>Obviously Zend Studio integrates very well with Zend<\/strong>. I would definitely use Zend Studio for a Zend project.<\/p>\n\n<p dir="ltr">Refactoring is quite good and support for PHPdoc and PHPUnit is provided.<\/p>\n\n<p dir="ltr">You can use your favourite Versioning System because Zend Studio will likely support it without needing plugins.<\/p>\n\n<h3 dir="ltr">Code Lobster<\/h3>\n\n<p dir="ltr"><strong>UPDATE<\/strong>: Just an additional review about CodeLobster<\/p>\n\n<p dir="ltr"><a href="http:\/\/www.codelobster.com\/">CodeLobster<\/a> PHP Edition is a free portable IDE primarily intended for creating and editing PHP, HTML, CSS, JavaScript files. It supports Drupal CMS, Joomla CMS, Smarty template engine, Twig, JQuery library, CodeIgniter framework, CakePHP framework, Symfony framework, Laravel framework, Phalcon framework, Yii framework and WordPress blogging platform. It includes PHP debugger, dynamic help, advanced autocomplete for all languages and frameworks and HTML\/CSS inspector like FireBug has.<\/p>\n\n<h3 dir="ltr">Conclusion<\/h3>\n\n<p dir="ltr">PHP IDEs need time to learn. They are more complex than PHP editors and offer more sophisticated functions.<\/p>\n\n<p dir="ltr">For small projects <strong>Geany<\/strong> is good. It’s light and has a neat interface.<\/p>\n\n<p dir="ltr"><strong>Netbeans<\/strong> is better when projects get bigger and more complex. It has many functions ready to use without annoying hassle.<\/p>\n\n<p dir="ltr">I would use <strong>Eclipse helios for php developers<\/strong> if I needed a plugin to solve a particular problem. Eclipse has more than 1,000 plugins. I guess that I’ll find something to suit my needs.<\/p>\n\n<p dir="ltr"><strong>Aptana Studio<\/strong> is good if you develop Ajax applications even if you have to renounce some functions.<\/p>\n\n<p dir="ltr"><strong>PHPStorm<\/strong> is an interesting product. It’s easy to use and offers a lot of tools without needing any strange configurations or installation procedures. Debuggers are integrated and this is a very good thing.<\/p>\n\n<p dir="ltr"><strong>Komodo IDE<\/strong> should be considered if you need strong debugging tools.<\/p>\n\n<p dir="ltr"><strong>Zend Studio<\/strong> is the elephant. Use it if you have to develop using Zend framework.<\/p>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/php-ide.jpg"},{"nid":"87","title":"Php frameworks, how to choose","body":"<p dir="ltr">Php frameworks are tools that it’s common to find in a developer’s studio.<\/p>\n\n<p>Artists make use of tools to forge their artistic creations. Php developers are artists creating php software and php frameworks are some of their tools.<\/p>\n\n<p dir="ltr">Does a php developer need php frameworks in the same way as a painter needs pigments?<\/p>\n\n<p dir="ltr">Not exactly. You can create software without frameworks. If you create clean and well-designed software, you can do without frameworks.<\/p>\n\n<p dir="ltr">While there is no need to explain why a painter needs pigments, there is a need to explain why developers use frameworks.<\/p>\n\n<h2 dir="ltr">The process of the artistic creation of software<\/h2>\n\n<p dir="ltr">A team of php developers is like an <a href="http:\/\/en.wikipedia.org\/wiki\/Artist_collective">artist collective<\/a>. A group of artists working together to create an artwork.<\/p>\n\n<p dir="ltr">Artistic creations have some characteristics that are common to every form of art.<\/p>\n\n<h3 dir="ltr">Durability<\/h3>\n\n<p dir="ltr"><strong>We want to enjoy an artistic creation as long as possible<\/strong>. Even if it isn’t a masterpiece, it’s always a proof of human creativity.<\/p>\n\n<p dir="ltr"><strong>This is why we need documentation<\/strong>. Even for the restoration of a painting documentation would be great. Imagine if Van Gogh had left detailed documentation about his painting techniques, the pigments he used and the materials.<\/p>\n\n<p dir="ltr">It would be much easier to restore his paintings so that future generations can enjoy them. Unfortunately, that documentation has to be recreated by the hard work of investigation.<\/p>\n\n<p dir="ltr">Software is artwork that isn’t static. It’s a collection of instructions by which a computer transforms information to serve a purpose.<\/p>\n\n<p dir="ltr">Its durability is more difficult to protect.<\/p>\n\n<p dir="ltr">Software isn’t prone to wear and tear like a painting, but it has to be easy to change and maintain because changes in hardware or other software can easily make it stop working or become no longer useful.<\/p>\n\n<p dir="ltr">It can also happen that software has to change if it is to continue to serve its purpose.<\/p>\n\n<p dir="ltr">Certainly software that no longer works or that works but is no longer useful should stay in museums like any other human artwork.<\/p>\n\n<p dir="ltr">But software is made to work and we enjoy it more if it works and is useful.<\/p>\n\n<p dir="ltr">This is why documentation is so important when creating software.<\/p>\n\n<p dir="ltr"><strong>There is no durability for software without documentation.<\/strong><\/p>\n\n<h3 dir="ltr">Collaboration<\/h3>\n\n<p dir="ltr">Many artworks need the collaboration of many artists to be created.<\/p>\n\n<p dir="ltr">Php software is no exception. Large php applications are created by teams of developers. <strong>There is a need for organization and collaboration if a large php application has to be built successfully.<\/strong><\/p>\n\n<h3 dir="ltr">Structure<\/h3>\n\n<p dir="ltr">Can’t we write just a single long php script? Yes, we can. But how will many developers collaborate? Will they edit the script at the same time? It won’t work. We need to divide the software into many files and have each file assigned to a different developer. Two developers can’t work on the same file.<\/p>\n\n<p dir="ltr">Structure also means that we need to know precisely what each file is for. This helps developers with their creative efforts. <strong>Every part of the software can be created successfully if the role of each of them is well-defined.<\/strong><\/p>\n\n<p dir="ltr">It’s like an orchestra. Every musician has to know what the other musicians are going to play in order for the orchestra to give life to a symphony.<\/p>\n\n<h3 dir="ltr">Tricks of the trade<\/h3>\n\n<p dir="ltr">Every art has its tricks of the trade. It’s true that creativity longs for novelty, but why reinvent the wheel? Before experimenting with new sounds when creating music it may be a good idea to have a look at existing ones.<\/p>\n\n<p dir="ltr">In the same way, before creating new software to perform a task it’s good to see if this has already been done.<\/p>\n\n<p dir="ltr"><strong>To use existing code to perform a task reduces errors and helps other developers<\/strong> deal with your code if they are familiar with the code you used for that task.<\/p>\n\n<h2 dir="ltr">How php frameworks help with the process of the artistic creation of software<\/h2>\n\n<p dir="ltr">Php frameworks help developers to:<\/p>\n\n<ul><li>improve the durability of their artworks (programs)<\/li>\n\t<li>collaborate with other developers<\/li>\n\t<li>give a structure to their code so that they “know what the other musicians are playing”<\/li>\n\t<li>take advantage of the “tricks of the trade” that other developers created<\/li>\n<\/ul><p dir="ltr">Let’s have a look to a few of them.<\/p>\n\n<h2 dir="ltr">CodeIgniter<\/h2>\n\n<p dir="ltr"><a href="http:\/\/ellislab.com\/codeigniter">CodeIgniter<\/a> is light and fast. It’s easy to configure and learn. It has a rich set of ready-to-use functions that save you time.\u003C\/p>\n\n<p dir="ltr">It’s flexible. You aren’t forced into strict rules. This may be seen as a minus point, but CodeIgniter is mainly used for small-medium applications so lack of structure is less of a problem.<\/p>\n\n<p dir="ltr">It has a large community that helps.<\/p>\n\n<p dir="ltr">CodeIgniter is the base for a CMS (Content Management System) called ExpressionEngine. It’s software similar to the well-known WordPress.<\/p>\n\n<p dir="ltr">This is why it’s particularly suitable for creating CMSs.<\/p>\n\n<h2 dir="ltr">CakePHP<\/h2>\n\n<p dir="ltr"><a href="http:\/\/cakephp.org\/">CakePHP<\/a> will look familiar to developers who used Ruby on Rails. It’s a php framework simple enough for beginners but powerful as well.<\/p>\n\n<p dir="ltr">It uses quite strict conventions that help to improve clarity and make development easier. On the other hand, these strict conventions may not suit your needs for flexibility.<\/p>\n\n<p dir="ltr">CakePHP is good for rapid prototyping and comes with a lot of features to help with implementing common tasks.<\/p>\n\n<h2 dir="ltr">Laravel<\/h2>\n\n<p dir="ltr"><a href="http:\/\/laravel.com\/">Laravel<\/a> is the php framework for web artisans. I like this. I agree, software development is craftsmanship.<\/p>\n\n<p dir="ltr">What strikes one about Laravel is its elegance. I wouldn’t recommend this php framework to a beginner, but it’s perfect if you want to go to the next level. In particular Laravel is great if you come from CodeIgniter.<\/p>\n\n<p dir="ltr">Laravel is more complex and powerful than CodeIgniter. It features code originating from more complex php frameworks and made easier.<\/p>\n\n<h2 dir="ltr">YiiFramework<\/h2>\n\n<p dir="ltr"><a href="http:\/\/www.yiiframework.com\/">YiiFramework<\/a> is a newcomer. It focuses on performance. It requires a lot of command line work that makes it less suitable for beginners.<\/p>\n\n<p dir="ltr">It’s known for being the best choice if you want to develop social applications.<\/p>\n\n<p dir="ltr">Don’t expect complexity and esoteric features. YiiFramework is newer than other php frameworks, so expect a less developed community.<\/p>\n\n<h2 dir="ltr">FuelPHP<\/h2>\n\n<p dir="ltr"><a href="http:\/\/fuelphp.com\/">FuelPHP<\/a> is another newcomer. You can learn HMVC by using it. HMVC is an evolution of MVC and it isn’t for beginners.<\/p>\n\n<p dir="ltr">FuelPHP makes use of command line utilities like YiiFramework. Its functionalities are rich but don’t expect the complexity of bigger php frameworks.<\/p>\n\n<p dir="ltr">As with any other newcomer in the php frameworks arena, its community needs time to grow.<\/p>\n\n<h2 dir="ltr">DooPHP<\/h2>\n\n<p dir="ltr"><a href="http:\/\/www.doophp.com\/">DooPHP<\/a> fits into the light-and-fast category. It is easy to learn and use, but it is best suited for intermediate developers because it can lack documentation and community support.<\/p>\n\n<h2 dir="ltr">Kohana<\/h2>\n\n<p dir="ltr"><a href="http:\/\/kohanaframework.org\/">Kohana<\/a> follows the HMVC pattern. As I have already pointed out this is not for beginners.<\/p\u003E\n\n<p dir="ltr">Add to this insufficient documentation and you know that you are better off building your muscles with some easier php framework.<\/p>\n\n<p dir="ltr">Kohana too is in the light-and-fast category, but this doesn’t mean that it isn’t powerful.<\/p>\n\n<h2 dir="ltr">Zend<\/h2>\n\n<p dir="ltr">Let’s pass to the elephants of the category. And I mean it literally since Zend’s logo is an elephant.<\/p>\n\n<p dir="ltr">You use <a href="http:\/\/framework.zend.com\/">Zend<\/a> only for huge applications that justify the complexity of Zend.<\/p>\n\n<p dir="ltr">To use Zend for a small-medium application is like using a sledgehammer to crack a nut.<\/p>\n\n<p dir="ltr">Just have a look at their website and you will find a rich gallery of big names.<\/p>\n\n<p dir="ltr">Anticipate devoting a long time to learning it.<\/p>\n\n<p dir="ltr">Zend has been created by the creators of PHP itself, so it can be a good place to learn PHP.<\/p>\n\n<h2 dir="ltr">Symfony<\/h2>\n\n<p dir="ltr"><a href="http:\/\/symfony.com\/">Symfony<\/a> is an old php framework and it’s one of the big guys together with Zend.<\/p>\n\n<p dir="ltr">Like Zend, Symfony is used for big applications that have to fit enterprise requirements.<\/p>\n\n<p dir="ltr">It’s not for beginners, but it has a large community so help is readily available. There is also a rich collection of tutorials on their website.<\/p>\n\n<h2 dir="ltr">Conclusion<\/h2>\n\n<p dir="ltr">I know that a few years in a corporation can kill the artist in the most creative of developers. They would make Van Gogh paint using a printing press.<\/p>\n\n<p dir="ltr">However, there are alternatives. In any case, <strong>php frameworks are one of the most important tools to consider when setting up your workshop<\/strong>.<\/p>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/Php_frameworks.jpg"},{"nid":"86","title":"Bounce processing, when SMTP server doesn’t return bounces properly","body":"<h2>What bounce processing is<\/h2>\n\n<p>When you send an email, it’s possible that it’s returned to you because of technical problems or mistakes made when writing the email.<\/p>\n\n<p>One of these mistakes may be that the recipient’s email address is wrong.<\/p>\n\n<h2><span>CRM sending mass emails<\/span><\/h2>\n\n<p>Many CRMs, Customer Relationship Management system, have the capability of sending mass mailing.<\/p>\n\n<p>They can send the same newsletter to hundreds or thousands of recipients.<\/p>\n\n<h2><span>CRM processing bounces<\/span><\/h2>\n\n<p>If an email is returned because of any problem, the CRM will process it.<\/p>\n\n<p>If an email is returned because the email address of the recipient is wrong, the CRM will put the contact on hold.<\/p>\n\n<h2><span>CiviCRM and bounce processing<\/span><\/h2>\n\n<p>I’m using CiviCRM as CRM. When I send a mailing to many contacts, CiviCRM sets the “Return-Path” header in the email to be something like: return+b.19.5.9c232c48e0ba219a@emanuelesantanche.com.<\/p>\n\n<p>When an email is returned because of errors, it should be sent to return@emanuelesantanche.com.<\/p>\n\n<p>The additional part b.19.5.9c232c48e0ba219a in the email address will tell CiviCRM which mailing and contact the original email was about.<\/p>\n\n<p>By using this information, CiviCRM will put the contact on hold, sometimes immediately, sometimes after a few failures occurred.<\/p>\n\n<h2><span>SMTP server not returning bounces correctly<\/span><\/h2>\n\n<p>It happens that the SMTP server I’m using, and many others, don’t process bounces properly.<\/p>\n\n<p>They should send the failure message to return+b.19.5.9c232c48e0ba219a@emanuelesantanche.com and the email should show up in the return@emanuelesantanche.com mailbox.<\/p>\n\n<p>CiviCRM should have nothing else to do than check the recipient, return+b.19.5.9c232c48e0ba219a@emanuelesantanche.com, and do its processing.<\/p>\n\n<p>Instead, the SMTP server sends the email back to where it was from, emanuele@emanuelesantanche.com.<\/p>\n\n<p>If CiviCRM checks the recipient, it doesn’t find the information it needs to process the bounce.<\/p>\n\n<h2><span>Scanning the entire email’s body<\/span><\/h2>\n\n<p>The solution is to scan the entire body of the returned email because somewhere there will be written that address CiviCRM needs.<\/p>\n\n<p>CiviCRM uses a regular expression like:<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p><span>'\/Return-Path: '<\/span> <span>.<\/span> <span>preg_quote<\/span><span>(<\/span><span>$dao<\/span><span>-&amp;<\/span>gt<span>;<\/span>localpart<span>)<\/span> <span>.<\/span> <span>'(b)'<\/span> <span>.<\/span> <span>$twoDigitString<\/span> <span>.<\/span> <span>'([0-9a-f]{16})@'<\/span> <span>.<\/span> <span>preg_quote<\/span><span>(<\/span><span>$dao<\/span><span>-&amp;<\/span>gt<span>;<\/span>domain<span>)<\/span> <span>.<\/span> <span>'\/'<\/span><\/p>\n\t<\/li>\n<\/ol><p>Let’s say that the returned email contains the headers of the original email:<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p>Return-Path:return+b.19.5.9c232c48e0ba219a@emanuelesantanche.com<\/p>\n\t<\/li>\n\t<li>\n\t<p>Received:from crm.emanuelesantanche.com (cpc19-finc14-2-0-cust228.4-2.cable.virginm.net [82.28.208.229]) by mx.zohomail.com<\/p>\n\t<\/li>\n\t<li>\n\t<p>with SMTPS id 1444752405240749.4338448238343; Tue, 13 Oct 2015 09:06:45 -0700 (PDT)<\/p>\n\t<\/li>\n\t<li>\n\t<p>Date:Tue, 13 Oct 2015 17:06:44 +0100<\/p>\n\t<\/li>\n<\/ol><p>The regular expression above will find the line:<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p>Return-Path:return+b.19.5.9c232c48e0ba219a@emanuelesantanche.com<\/p>\n\t<\/li>\n<\/ol><p>and CiviCRM will process the bounce correctly.<\/p>\n\n<h2><span>Problem solved?<\/span><\/h2>\n\n<p>Yes, you got it, the regular expression above won’t find the line with the return path because it looks for a space that is missing.<\/p>\n\n<p>It should be:<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p>'\/Return-Path:' . preg_quote($dao-&amp;gt;localpart) . '(b)' . $twoDigitString . '([0-9a-f]{16})@' . preg_quote($dao-&amp;gt;domain) . '\/'<\/p>\n\t<\/li>\n<\/ol><p>Note the space after ‘Return-Path:’, I removed it.<\/p>\n\n<p>Now the regular expression will match.<\/p>\n\n<h2><span>Fixing CiviCRM code<\/span><\/h2>\n\n<p>I had to fix CiviCRM code for the regular expression to work correctly.<\/p>\n\n<p>I changed this php file: \/sites\/all\/modules\/civicrm\/CRM\/Utils\/Mail\/EmailProcessor.php<\/p>\n\n<p>This is the change:<\/p>\n\n<p> \n<\/p><ol start="170"><li>\n\t<p><em>\/\/ a tighter regex for finding bounce info in soft bounces’ mail bodies<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ EMS 2015-10-15 fixing return path regex<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/$rpRegex = '\/Return-Path: ' . preg_quote($dao-&amp;gt;localpart) . '(b)' . $twoDigitString . '([0-9a-f]{16})@' . preg_quote($dao-&amp;gt;domain) . '\/';<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$rpRegex<\/span> <span>=<\/span> <span>'\/Return-Path:\\s*'<\/span> <span>.<\/span> <span>preg_quote<\/span><span>(<\/span><span>$dao<\/span><span>-&amp;<\/span>gt<span>;<\/span>localpart<span>)<\/span> <span>.<\/span> <span>'(b)'<\/span> <span>.<\/span> <span>$twoDigitString<\/span> <span>.<\/span> <span>'([0-9a-f]{16})@'<\/span> <span>.<\/span> <span>preg_quote<\/span><span>(<\/span><span>$dao<\/span><span>-&amp;<\/span>gt<span>;<\/span>domain<span>)<\/span> <span>.<\/span> <span>'\/'<\/span><span>;<\/span><\/p>\n\t<\/li>\n<\/ol><p>I used the regular expression:<\/p>\n\n<ol><li>\n\t<p>'\/Return-Path:\\s*' . preg_quote($dao-&amp;gt;localpart) . '(b)' . $twoDigitString . '([0-9a-f]{16})@' . preg_quote($dao-&amp;gt;domain) . '\/';<\/p>\n\t<\/li>\n<\/ol><p>to make it work either there is a space or not.<\/p>\n\n<p>Precisely ‘\\s’ will match any whitespace should occur between ‘Return-Path:’ and the following.<\/p>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/CiviCRM_and_bounce_processing.png"},{"nid":"85","title":"Configuring postfix to relay email through Zoho Mail","body":"<p>This has taken me quite some time to figure out.<\/p>\n\n<p>First of all you need the Zoho email address you want to use when relaying emails through Zoho.<\/p>\n\n<p>It has to be one of the email addresses you configured by using Zoho control panel. In my case I created one to use only to relay email.<\/p>\n\n<p>Let’s say that this email address is application@example.com. It will have a password as well, say applicationpassword.<\/p\u003E\n\n<p>When configuring postfix, you edit many files. Let’s see them one by one.<\/p>\n\n<h3>Generic<\/h3>\n\n<p>The file \/etc\/postfix\/generic maps local users to email addresses.<\/p>\n\n<p>If email is sent to a local user such root, the address will be replaced with the one you specify.<\/p>\n\n<p>In my case I have a single line like:<\/p>\n\n<p>root application@example.com<\/p>\n\n<p>After editing this file remember to use the command:<\/p>\n\n<ol><li>\n\t<p>postmap generic<\/p>\n\t<\/li>\n<\/ol><h3>Password<\/h3>\n\n<p>The file \/etc\/postfix\/password contains the passwords postfix has to use to connect to the smtp server.<\/p>\n\n<p>It’s content will be something like:<\/p>\n\n<p>smtp.zoho.com:587 application@example.com:applicationpassword<\/p>\n\n<p>You need to do postmap password.<\/p>\n\n<h3>tls_policy<\/h3>\n\n<p>The file \/etc\/postfix\/tls_policy contains the policies to be used when sending encrypted emails by using the TLS protocol, the one I’m using in this case.<\/p>\n\n<p>The file contains just this line:<\/p>\n\n<p>smtp.zoho.com:587 encrypt<\/p>\n\n<p>By doing so we force the use of TLS every time we send an email.<\/p>\n\n<p>You need to do postmap tls_policy.<\/p>\n\n<h3>smtp_header_checks<\/h3>\n\n<p>The file \/etc\/postfix\/smtp_header_checks contains rules to be used to rewrite the headers of the emails about to be sent.<\/p>\n\n<p>This is the most important file in our case.<\/p>\n\n<p>It rewrites the sender so that it always matches our Zoho account, application@example.com.<\/p>\n\n<p>No more ‘Relaying disallowed’ errors!<\/p>\n\n<p>This is its content:<\/p>\n\n<p> <\/p>\n\n<ol><li>\n\t<p>\/^From:.*\/ REPLACE From: LOCALHOST System &amp;lt;application@emanuelesantanche.com&amp;gt;;<\/p>\n\t<\/li>\n<\/ol><p> <\/p>\n\n<p>No need for postmap here.<\/p>\n\n<p>You need to install the package postfix-pcre otherwise no rewriting will happen.<\/p>\n\n<p> <\/p>\n\n<ol><li>\n\t<p><strong>apt-get install<\/strong> postfix-pcre<\/p>\n\t<\/li>\n<\/ol><p> <\/p>\n\n<h3>Main.cf<\/h3>\n\n<p>This is the main configuration file postfix uses.<\/p>\n\n<p>Replace yourhostname with the hostname of your server, the one where postfix is installed on and that is sending emails through Zoho.<\/p>\n\n<p> <\/p>\n\n<ol><li>\n\t<p># TLS parameters<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtp_tls_policy_maps = hash:\/etc\/postfix\/tls_policy<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtpd_tls_cert_file=\/etc\/ssl\/certs\/ssl-cert-snakeoil.pem<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtpd_tls_key_file=\/etc\/ssl\/private\/ssl-cert-snakeoil.key<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtpd_use_tls=yes<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtpd_tls_session_cache_database = btree:${data_directory}\/smtpd_scache<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtp_tls_session_cache_database = btree:${data_directory}\/smtp_scache<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtp_header_checks = pcre:\/etc\/postfix\/smtp_header_checks<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>myhostname = yourhostname<\/p>\n\t<\/li>\n\t<li>\n\t<p>alias_maps = hash:\/etc\/aliases<\/p>\n\t<\/li>\n\t<li>\n\t<p>alias_database = hash:\/etc\/aliases<\/p>\n\t<\/li>\n\t<li>\n\t<p>mydestination = yourhostname, localhost.com, localhost<\/p>\n\t<\/li>\n\t<li>\n\t<p>relayhost = smtp.zoho.com:587<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtp_sasl_auth_enable = yes<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtp_sasl_password_maps = hash:\/etc\/postfix\/password<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtp_sasl_security_options =<\/p>\n\t<\/li>\n\t<li>\n\t<p>smtp_generic_maps = hash:\/etc\/postfix\/generic<\/p>\n\t<\/li>\n<\/ol><p> <\/p>\n\n<h3>master.cf<\/h3>\n\n<p>In the file \/etc\/postfix\/master.cf I uncommented this line:<\/p>\n\n<p> <\/p>\n\n<ol><li>\n\t<p>smtps inet n - - - - smtpd<\/p>\n\t<\/li>\n<\/ol><p> <\/p>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/Postfix_and_Zoho.png"},{"nid":"84","title":"Impossible to login to WordPress website","body":"<p>The problem was that it was not possible to login to a WordPress website, to the admin dashboard I mean.<\/p>\n\n<p>I tried many things:<\/p>\n\n<ul><li>used scripts to reset the password. They actually change the pwd in the wp_user table. See below an example of update command used to change pwd.<\/li>\n\t<li>deleted cache plugins after having zipped them<\/li>\n\t<li>deleted cache folder, \/wp-content\/cache<\/li>\n\t<li>deactivated wp super cache plugin, which I had deleted before, by updating the option active_plugins in the table wp_options<\/li>\n\t<li>deleted anything related to caches in wp-config.php<\/li>\n\t<li>disabled all plugins by renaming the folder \/wp-content\/plugins<\/li>\n\t<li>enabled debugging<\/li>\n<\/ul><p>What worked was an upgrade from WordPress 3.9.1 to 4.4.2.<\/p>\n\n<p>I used these instructions: <a href="https:\/\/codex.wordpress.org\/Upgrading_WordPress_-_Extended_Instructions">https:\/\/codex.wordpress.org\/Upgrading_WordPress_-_Extended_Instructions<\/a><\/p>\n\n<ol><li>\n\t<p><strong>USE<\/strong> name_of_your_database<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>UPDATE<\/strong> <span>`wp<strong>_<\/strong>users`<\/span> <strong>SET<\/strong> <span>`user<strong>_<\/strong>pass`<\/span><span>=<\/span> <span>MD5<\/span><span>(<\/span><span>'yourpassword'<\/span><span>)<\/span> <strong>WHERE<\/strong> <span>`user<strong>_<\/strong>login`<\/span><span>=<\/span><span>'yourusername'<\/span><span>;<\/span><\/p>\n\t<\/li>\n<\/ol>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/Wordpress_login_troubleshooting.jpg"},{"nid":"83","title":"Installing Open Project on Debian 8 server","body":"<p>I’m going to install Open Project on a VPS (Virtual Private Server).<\/p>\n\n<h2>What is Open Project?<\/h2>\n\n<p><a href="https:\/\/www.openproject.org\/">Open Project<\/a> is an open source application you can use to manage projects. It’s used for software projects.<\/p>\n\n<p>It supports Agile methodology, bug tracking and time tracking.<\/p>\n\n<p>I’ll use it to manage projects meant to build applications for my clients.<\/p>\n\n<p>I’ll describe here the procedure I followed to install Open Project on the Virtual Private Server where I run my own website and many others.<\/p>\n\n<h2>What do I need to perform the installation?<\/h2>\n\n<p>Of course a server. My VPS runs linux debian version 8.<\/p>\n\n<p>A web server as well. In my case I have nginx already installed and running. I use it instead of Apache for better performance. Nginx’s version is 1.6.2.<\/p>\n\n<p>A database. My server runs a mysql instance. Its version is 5.5.2.<\/p>\n\n<p>Other products will be installed.<\/p>\n\n<h2>Where did I find information about the installation procedure?<\/h2>\n\n<p>I used this procedure: <a href="https:\/\/github.com\/opf\/openproject\/blob\/stable\/7\/docs\/installation\/manual\/README.md">Manual installation of OpenProject 7.0 with Apache on Ubuntu 14.04. LTS<\/a><\/p>\n\n<p>Since the procedure uses Apache, I had to find about how to configure nginx.<\/p>\n\n<p>I found these instructions: <a href="https:\/\/www.digitalocean.com\/community\/questions\/install-openproject-on-ubuntu-12-04-with-nginx">Install OpenProject on Ubuntu 12.04 with nginx<\/a><\/p>\n\n<h2>Creating user and group<\/h2>\n\n<p>I need to create an user that will be running Open Project. This user will belong to a special group created on purpose for Open Project.<\/p>\n\n<p>Here I create the user openproject and the group of the same name. I also assign a password to the user.<\/p>\n\n<ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># groupadd openproject<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># useradd --create-home --gid openproject openproject<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># passwd openproject<\/em><\/p>\n\t<\/li>\n<\/ol><h2>Creating the database<\/h2>\n\n<p>Open Project needs a database where to store information.<\/p>\n\n<p>The database to create has name openproject. I create as well a myswl user of same name. Open Project will use it to access the database.<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p><strong>CREATE<\/strong> <strong>DATABASE<\/strong> openproject CHARACTER <strong>SET<\/strong> utf8<span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>CREATE<\/strong> <span>USER<\/span> <span>'openproject'<\/span>@<span>'localhost'<\/span> IDENTIFIED BY \u003Cspan>'your password here'<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>GRANT<\/strong> <strong>ALL<\/strong> <strong>PRIVILEGES<\/strong> <strong>ON<\/strong> openproject.<span>*<\/span> <strong>TO<\/strong> <span>'openproject'<\/span>@<span>'localhost'<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>FLUSH <strong>PRIVILEGES<\/strong><span>;<\/span><\/p>\n\t<\/li>\n<\/ol><h2>Installing needed packages<\/h2>\n\n<p>For Open Project to work, I have to install many needed packages.<\/p>\n\n<p>Consider that the installation of bower may not be needed.<\/p>\n\n<p>Node.js, which provides the command npm, was already present on my server.<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get update<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get install build-essential<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get install -y libssl-dev libreadline-dev zlib1g-dev<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get install libmysqlclient-dev<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># npm install -g bower<\/em><\/p>\n\t<\/li>\n<\/ol><h2>Ruby on rails<\/h2>\n\n<p>Open Project is based on Ruby on Rails.<\/p>\n\n<p>I’ll use <a href="http:\/\/rbenv.org\/">rbenv<\/a> to install a specific version of Ruby on Rails. Rbenv will be installed in the folder .rbenv under the home folder of the user openproject.<\/p>\n\n<p>Ruby-build is a plugin to be used by rbenv to install Ruby on Rails.<\/p>\n\n<p>The final “ruby –version” command shows that Ruby has been installed.<\/p>\n\n<p>I had to increase my server’s memory for the installation to work. It needs 1Gb of memory and 512Mb of swap.<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># su openproject --login<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>git clone<\/strong> https:<strong>\/\/<\/strong>github.com<strong>\/<\/strong>sstephenson<strong>\/<\/strong>rbenv.git ~<strong>\/<\/strong>.rbenv<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ \u003C\/span><strong>echo<\/strong> <span>'export PATH="$HOME\/.rbenv\/bin:$PATH"'<\/span> <strong>&amp;<\/strong>gt;<strong>&amp;<\/strong>gt; ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>echo<\/strong> <span>'eval "$(rbenv init -)"'<\/span> <strong>&amp;<\/strong>gt;<strong>&amp;<\/strong>gt; ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>source<\/strong> ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>git clone<\/strong> https:<strong>\/\/<\/strong>github.com<strong>\/<\/strong>sstephenson<strong>\/<\/strong>ruby-build.git ~<strong>\/<\/strong>.rbenv<strong>\/<\/strong>plugins<strong>\/<\/strong>ruby-build<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>rbenv <strong>install<\/strong> 2.4.1<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>rbenv rehash<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>rbenv global 2.4.1<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>ruby <span>--version<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>ruby 2.4.1p111 <strong>(<\/strong><span>2017<\/span>-03-<span>22<\/span> revision <span>58053<\/span><strong>)<\/strong> <strong>[<\/strong>x86_64-linux<strong>]<\/strong><\/p>\n\t<\/li>\n<\/ol><h2>Open Project<\/h2>\n\n<p>Now I’ll install Open Project itself.<\/p>\n\n<p>These are the commands I gave to install Open Project.<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>cd<\/strong> ~<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>git clone<\/strong> https:<strong>\/\/<\/strong>github.com<strong>\/<\/strong>opf<strong>\/<\/strong>openproject-ce.git <span>--branch<\/span> stable<strong>\/<\/strong><span>7<\/span> <span>--depth<\/span> <span>1<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>cd<\/strong> openproject-ce<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ gem <strong>install<\/strong> bundler\u003C\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ bundle <strong>install<\/strong> <span>--deployment<\/span> <span>--without<\/span> postgres sqlite development <strong>test<\/strong> therubyracer docker<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ npm <strong>install<\/strong><\/p>\n\t<\/li>\n<\/ol><h2>Configuring Open Project<\/h2>\n\n<p>Two files need to be configured.<\/p>\n\n<p>They are located in the folder \/home\/openproject\/openproject-ce\/config and their names are database.yml and configuration.yml.<\/p>\n\n<p>The file database.yml configures the access to the database. You have to specify the name of the database, the user Open Project uses to access mysql and the password.<\/p>\n\n<p>This information goes to the ‘production’ section.<\/p>\n\n<p>The file database.yml will look like this:<\/p>\n\n<ol><li>\n\t<p>production:<\/p>\n\t<\/li>\n\t<li>\n\t<p>   adapter: mysql2<\/p>\n\t<\/li>\n\t<li>\n\t<p>   database: openproject<\/p>\n\t<\/li>\n\t<li>\n\t<p>   host: localhost<\/p>\n\t<\/li>\n\t<li>\n\t<p>   username: openproject<\/p>\n\t<\/li>\n\t<li>\n\t<p>   password: your password<\/p>\n\t<\/li>\n\t<li>\n\t<p>   encoding: utf8<\/p>\n\t<\/li>\n\t<li>\n\t<p>   variables:<\/p>\n\t<\/li>\n<\/ol><p>The file configuration.yml needs some settings so that Open Project can send emails.<\/p>\n\n<p>This heavily depends on the smtp service you use to send emails from your server. In this case I’m using Google GMail.<\/p>\n\n<p>This is the smtp section in configuration.yml:<\/p>\n\n<ol><li>\n\t<p>default:<\/p>\n\t<\/li>\n\t<li>\n\t<p>  # Outgoing emails configuration (see examples above)<\/p>\n\t<\/li>\n\t<li>\n\t<p>  email_delivery_method: :smtp<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_address: smtp.gmail.com<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_port: 587<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_domain: localhost<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_authentication: plain<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_user_name: "esantanche@gmail.com"<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_password: "your password here"<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_enable_starttls_auto: true<\/p>\n\t<\/li>\n<\/ol><p>To create database.yml and configuration.yml I used database.yml.example and configuration.yml.example. You find these files in the same folder as the one where database.yml and configuration.yml are located.<\/p>\n\n<h2>Completing Open Project installation<\/h2>\n\n<p>Now that Open Project knows about the database it has to use, I can proceed to create the tables and anything else Open Project needs inside the database.<\/p>\n\n<p>This is what I’m going to do know. During this phase I had to increase the server’s memory to 1Gb.\u003C\/p>\n\n<ol><li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce<strong>\/<\/strong>config$ <strong>cd<\/strong> ~<strong>\/<\/strong>openproject-ce<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"production"<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake db:create<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"production"<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake db:migrate<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"production"<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake db:seed<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"production"<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake assets:precompile<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <strong>echo<\/strong> <span>"export SECRET_KEY_BASE=<span>$(.\/bin\/rake secret)<\/span>"<\/span> <strong>&gt;&gt;<\/strong> ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <strong>source<\/strong> ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n<\/ol><h2>Configuring nginx<\/h2>\n\n<p>To access the application I need to configure the webserver, in my case nginx.<\/p>\n\n<p>My job is simplified because I’m not installing Passenger, which is an application server that sits between the web server and ruby on rails. It’s purpose is to improve performances for installation with a lot of users. It’s not my case.<\/p>\n\n<p>Nginx will connect directly to the Ruby on Rails server.<\/p>\n\n<p>This is nginx configuration for Open Project:<\/p>\n\n<ol><li>\n\t<p># openproject  <\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>    # this is to redirect http requests to https ones<\/p>\n\t<\/li>\n\t<li>\n\t<p>    server {<\/p>\n\t<\/li>\n\t<li>\n\t<p>        listen         80;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        server_name    openproject.emanuelesantanche.com;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        return         301 https:\/\/$server_name$request_uri;<\/p>\n\t<\/li>\n\t<li>\n\t<p>    }<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>    upstream app_server {<\/p>\n\t<\/li>\n\t<li>\n\t<p>        server 127.0.0.1:3000 fail_timeout=0;<\/p>\n\t<\/li>\n\t<li>\n\t<p>    }<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>    server {<\/p>\n\t<\/li>\n\t<li>\n\t<p>        #listen 80;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        listen 443 ssl;<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        server_name openproject.emanuelesantanche.com;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        root \/home\/openproject\/openproject-ce\/public;<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        ssl_certificate \/etc\/letsencrypt\/live\/openproject.emanuelesantanche.com\/cert.pem;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        ssl_certificate_key \/etc\/letsencrypt\/live\/openproject.emanuelesantanche.com\/privkey.pem;<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        location \/ {<\/p>\n\t<\/li>\n\t<li>\n\t<p>               try_files $uri\/index.html $uri.html $uri @app;    <\/p>\n\t<\/li>\n\t<li>\n\t<p>        }<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        location @app {<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_set_header Host $http_host;<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_redirect off;<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_pass http:\/\/app_server;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        }<\/p>\n\t<\/li>\n\t<li>\n\t<p>    }<\/p>\n\t<\/li>\n<\/ol><p>The configuration has been modified to use https with certificates provided by <a href="https:\/\/letsencrypt.org\/">Let’s Encrypt<\/a>.<\/p>\n\n<h2>Starting Ruby on Rails<\/h2>\n\n<p>For the application to work, I have to start Ruby on Rails. It will listen on the port 3000.<\/p>\n\n<p>Nginx will communicate with it on the same port. You can see the port reference in nginx configuration.<\/p>\n\n<p>To start Ruby on Rails I do:<\/p>\n\n<ol><li>\n\t<p><span>root@FREEDOMANDCOURAGE:~# <\/span><strong>su<\/strong> openproject <span>--login<\/span>   \u00a0                                  <\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>cd<\/strong> ~<strong>\/<\/strong>openproject-ce                                        <\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ bundler <strong>exec<\/strong> rails server <span>-e<\/span> production <span>-d<\/span><\/p>\n\t<\/li>\n<\/ol><h2>Does it work?<\/h2>\n\n<p>Now I’m ready to test it!<\/p>\n\n<p>Nginx is configured to serve the application at the url openproject.emanuelesantanche.com.<\/p>\n\n<p>I went to my hosting provider’s control panel to configure the subdomain openproject.<\/p>\n\n<p>It’s also possible, just for a quick test, to associate the server’s ip address to openproject.emanuelesantanche.com in your local hosts file.<\/p>\n\n<p>I just open a browser at openproject.emanuelesantanche.com.<\/p>\n\n<p>It works!<\/p>\n\n<h2>Running jobs<\/h2>\n\n<p>Ruby on Rails needs to run some jobs periodically. A line in crontab will do it.<\/p>\n\n<p>Here it is:<\/p>\n\n<ol><li>\n\t<p>48 * * * * PATH=\/home\/openproject\/.rbenv\/shims:$PATH; cd \/home\/openproject\/openproject-ce; RAILS_ENV="production" .\/bin\/rake -q jobs:workoff &gt;\/dev\/null 2&gt;&amp;1<\/p>\n\t<\/li>\n<\/ol><p>In this case the crontab job gets executed once an hour. According to documentation, it should be run every minute.<\/p>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/openproject-logo-1.png"},{"nid":"82","title":"Use your smart-phone as webcam and keep enjoying enhanced security as well","body":"<h2>What I want to do<\/h2>\n\n<p>I don’t want to buy a webcam for my computer. I have a smart-phone with both front and rear cameras. Can’t I use it as webcam?<\/p>\n\n<h2>Are you interested in Enhanced Security?<\/h2>\n\n<p>Maybe you are not interested in using your smart-phone as webcam.<\/p>\n\n<p>But you may be interested in Enhanced Security instead.<\/p>\n\n<p>If you are, keep reading because I’m going to tell you about SELinux, an additional level of security Linux servers, and desktops, enjoy.<\/p>\n\n<h2>The environment<\/h2>\n\n<p>The scenery where our troubleshooting is going to happen is a Linux Fedora desktop computer.<\/p>\n\n<p>It comes with SELinux installed and running by default.<\/p>\n\n<p>Precisely it’s Fedora 25. It’s using KDE Plasma as desktop environment. The desktop environment is irrelevant to our problem.<\/p>\n\n<h2>Droidcam<\/h2>\n\n<p>Droidcam is both an Android application and a Linux one. On the Linux side, Droidcam is written in C language and uses GTK as toolkit to create user interfaces. It can be used from the command line as well.<\/p>\n\n<p>You find the source code here: https:\/\/github.com\/aramg\/droidcam\/tree\/master\/linux.\u003C\/p>\n\n<p>You install and run Droidcam on Linux and do the same on your Android smartphone. It’s simple, you just tell the Linux application what ip address it can find the smart-phone at.<\/p>\n\n<p>Droidcam uses port 4747. You may have to fix problems caused by firewalls if, like me, you have a firewall on your computer.<\/p>\n\n<h2>SELinux<\/h2>\n\n<p>SELinux adds security checks to your Linux computer. It makes more difficult for malware to infect the system. Linux is well-known for better security. SELinux adds even more security by isolating processes so that they don’t harm the system.<\/p>\n\n<h2>Why was Droidcam a problem?<\/h2>\n\n<p>You don’t find Droidcam in standard software repository. I downloaded it from https:\/\/www.dev47apps.com\/files\/600\/droidcam-64bit.tar.bz2.<\/p>\n\n<p>There is an ‘install’ script to run. It produces two modules the operating system will load when starting.<\/p>\n\n<p>The problem was that SELinux prevented the modules from starting complaining about lack of permission.<\/p>\n\n<p>I was getting these errors:<\/p>\n\n<ol><li>\n\t<p>Aug 12 07:31:58 localhost.localdomain systemd-modules-load[535]: Failed to insert 'videodev': Permission denied<\/p>\n\t<\/li>\n\t<li>\n\t<p>Aug 12 07:31:58 localhost.localdomain systemd-modules-load[535]: Failed to insert 'v4l2loopback_dc': Permission denied<\/p>\n\t<\/li>\n<\/ol><p>When you see this sort of errors, you may not think about SELinux. You think that there may be a common permission problem related to user permissions. That’s why it can be difficult to troubleshoot.<\/p>\n\n<h2>Disabling SELinux<\/h2>\n\n<p>To see if SELinux is a problem, you first disable it.<\/p>\n\n<p>You edit the file \/etc\/selinux\/config where you set SELINUX=disabled.<\/p>\n\n<p>Done this, the problem disappeared. But you are left with no Enhanced Security.<\/p>\n\n<h2>Using the audit log<\/h2>\n\n<p>SELinux registers every permission violation in a log called the audit log. You find it at this location: \/var\/log\/audit.<\/p>\n\n<p>In this case, our permission problem was logged in this way:<\/p>\n\n<ol><li>\n\t<p>type=AVC msg=audit(1502557651.920:115): avc:  denied  { module_load } for  pid=1028 comm="systemd-modules" scontext=system_u:system_r:systemd_modules_load_t:s0<\/p>\n\t<\/li>\n\t<li>\n\t<p>tcontext=system_u:system_r:systemd_modules_load_t:s0 tclass=system permissive=0<\/p>\n\t<\/li>\n<\/ol><h2>Now what?<\/h2>\n\n<p>Do I have to learn about SELinux now? Do I need to learn how to configure SELinux permissions? Do I need to read long instructions and manuals?<\/p>\n\n<p>Happily no, I don’t have to.<\/p>\n\n<p>SELinux comes with two very handy tools.<\/p>\n\n<p>The first one is audit2why. You feed it with the error message and it tells you what’s the problem.<\/p>\n\n<p>Let’s see<\/p>\n\n<ol><li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong> <strong>echo<\/strong> <span>"type=AVC msg=audit(1502557651.920:115): avc:  denied  { module_load } for  pid=1028 comm="<\/span>systemd-modules<span>" scontext=system_u:system_r:systemd_modules_load_t:s0 tcontext=system_u:system_r:systemd_modules_load_t:s0 tclass=system permissive=0"<\/span> <strong>|<\/strong> audit2why<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>type<\/span>=AVC <span>msg<\/span>=audit<strong>(<\/strong><span>1502557651.920<\/span>:<span>115<\/span><strong>)<\/strong>: avc:  denied  <strong>{<\/strong> module_load <strong>}<\/strong> <strong>for<\/strong>  <span>pid<\/span>=<span>1028<\/span> <span>comm<\/span>=systemd-modules <span>scontext<\/span>=system_u:system_r:systemd_modules_load_t:s0 <span>tcontext<\/span>=system_u:system_r:systemd_modules_load_t:s0 <span>tclass<\/span>=system <span>permissive<\/span>=<span>0<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>Was caused by:<\/p>\n\t<\/li>\n\t<li>\n\t<p>Missing <strong>type<\/strong> enforcement <strong>(<\/strong>TE<strong>)<\/strong> allow rule.<\/p>\n\t<\/li>\n\t<li>\n\t<p>You can use audit2allow to generate a loadable module to allow this access.<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong><\/p>\n\t<\/li>\n<\/ol><p>The tool is telling us that a rule is missing. A rule that would allow the operation that has been denied, the latter being the loading operation of the module Droidcam installed.<\/p>\n\n<p>We are also advised to use another tool to generate that rule. Just to add to confusion, SELinux calls its rules modules. But a SELinux module is about giving permissions whilst a kernel module is about performing tasks like managing a webcam.<\/p>\n\n<p>The tool we need to use is audit2allow.<\/p>\n\n<p>Here it is:<\/p>\n\n<ol><li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong> <strong>echo<\/strong> <span>"type=AVC msg=audit(1502557651.920:115): avc: denied { module_load } for pid=1028 comm="<\/span>systemd-modules<span>" scontext=system_u:system_r:systemd_modules_load_t:s0 tcontext=system_u:system_r:systemd_modules_load_t:s0 tclass=system permissive=0"<\/span> <strong>|<\/strong> audit2allow <span>-M<\/span> module_load_policy<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>********************<\/strong> IMPORTANT <strong>***********************<\/strong><\/p>\n\t<\/li>\n\t<li>\n\t<p>To <strong>make<\/strong> this policy package active, execute:<\/p>\n\t<\/li>\n\t<li>\n\t<p>semodule <span>-i<\/span> module_load_policy.pp<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong> <strong>sudo<\/strong> semodule <span>-i<\/span> module_load_policy.pp<\/p>\n\t<\/li>\n<\/ol><p>The tool created the permission we need for Droidcam to work from the audit error above. No complicated configurations to do, no long manuals to learn. Just feed audit2allow with the error message and it will create a rule SELinux will use to allow Droidcam to work.<\/p>\n\n<p>Just consider that SELinux calls its permission rules modules and this may be confusing.<\/p>\n\n<h2>Conclusion<\/h2>\n\n<p>When you get strange permission errors you can’t explain and you eventually, after long investigation, realise it’s SELinux causing them, you want to get rid of SELinux.<\/p>\n\n<p>Why not just disable it? No mysterious permission errors any more.<\/p>\n\n<p>There are cases, like this one, that you are doing strange installations. Droidcam is a bit special and creates kernel modules its own way.<\/p>\n\n<p>Imagine that it was some malware installing modules. SELinux would have saved you from harm.<\/p>\n\n<p>It’s better to keep SELinux up and running and enjoy the enhanced security it offers.<\/p>\n\n<p>Happily it provides tools that make you job easier and you don’t have to learn complicated ways to configure permission rules.<\/p>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/SELinux.png"},{"nid":"81","title":"WYSIWYG editor for Mediawiki","body":"<h2>What Mediawiki is and what it is for<\/h2>\n\n<p>Mediawiki is the engine that powers Wikipedia. It’s a wiki and it’s used to create collaborative websites where people can share knowledge and keep all sorts of information.<\/p>\n\n<p>They make it possible for people to work on the same document.<\/p>\n\n<p>Personally I keep most of my information in Mediawiki websites.<\/p>\n\n<p>Mediawiki is very good to create intranets, website used internally in an organization.<\/p>\n\n<h2>How to make editing easier<\/h2>\n\n<p>Many people find editing wiki pages difficult. Even if you get a standard tool bar and you don’t have to remember wiki syntax, there are some things that are difficult to edit and maintain.<\/p>\n\n<p>Tables are one of them. it’s easy to create a table because Mediawiki offers a wizard that guides you. But it’s not so easy to edit the table, to add rows and columns, to edit the content.<\/p>\n\n<h2>WYSIWYG editor<\/h2>\n\n<p>A WYSIWYG editor is, in general, an editor that makes it easier to work on a document.<\/p>\n\n<p>In our case a WYSIWYG editor hides Mediawiki syntax so that you don’t have to remember it at all. You just edit the document in the same way you would edit a document created with a word processor.<\/p>\n\n<h2>Visual editor<\/h2>\n\n<p>Visual Editor is our WYSIWYG editor. Wikipedia uses it as well.<\/p>\n\n<p>The starting point to find information about it is its <a href="https:\/\/www.mediawiki.org\/wiki\/Extension:VisualEditor">Mediawiki extension page<\/a>.<\/p>\n\n<h2>Installing Parsoid<\/h2>\n\n<p>Before installing Visual Editor, we have to install Parsoid. It’s a server process that converts HTML code into Mediawiki syntax and back.<\/p>\n\n<p>The WYSIWYG editor works on HTML code. It keeps our editing activity in HTML form. But it has to eventually convert that HTML into Mediawiki syntax otherwise Mediawiki won’t be able to store it.<\/p>\n\n<p>When it has to save a page to Mediawiki database, Visual Editor takes the HTML version of the document and gives it to Parsoid. The latter converts it into Mediawiki syntax and Visual Editor gives that syntax to Mediawiki for it to store in the database.<\/p>\n\n<p><strong>The package<\/strong><\/p>\n\n<p>To install Parsoid we need to add a repository to our Debian software sources. My server runs Debian Jessie (version 8).<\/p>\n\n<ol><li>\n\t<p><strong>echo<\/strong> <span>"deb https:\/\/releases.wikimedia.org\/debian jessie-mediawiki main"<\/span> <strong>|<\/strong> <strong>sudo<\/strong> <strong>tee<\/strong> <strong>\/<\/strong>etc<strong>\/<\/strong>apt<strong>\/<\/strong>sources.list.d<strong>\/<\/strong>parsoid.list<\/p>\n\t<\/li>\n<\/ol><p>You may have to add an authentication key to access the repository. This is generally done with a command like the following one:<\/p>\n\n<ol><li>\n\t<p><strong>sudo<\/strong> <strong>apt-key<\/strong> advanced <span>--keyserver<\/span> keys.gnupg.net <span>--recv-keys<\/span> 90E9F83F22250DD7<\/p>\n\t<\/li>\n<\/ol><p>The actual key may be different.<\/p>\n\n<p>Now let’ install the package.<\/p>\n\n<ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<strong>\/<\/strong>sources.list.d<em># sudo apt-get update<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<strong>\/<\/strong>sources.list.d<em># sudo apt-get install parsoid<\/em><\/p>\n\t<\/li>\n<\/ol><p>You may need to install the package apt-transport-https as well.<\/p>\n\n<h2>Configuring Parsoid<\/h2>\n\n<p>There are many files to configure for Parsoid to work.<\/p>\n\n<p><strong>Config.yaml<\/strong><\/p>\n\n<p>The main one if config.yaml (\/etc\/mediawiki\/parsoid\/config.yaml).<\/p>\n\n<p>You find there a line like this:<\/p>\n\n<ol><li>\n\t<p>http:\/\/localhost\/w\/api.php<\/p>\n\t<\/li>\n<\/ol><p>This is needed for Parsoid to access Mediawiki apis. Parsoid uses Mediawiki apis to return the result of the conversions it performs.<\/p>\n\n<p>I have many websites on my server. I need to replace localhost with my Mediawiki installation domain.<\/p>\n\n<p>Something like mediawiki.example.com. Your domain will be different.<\/p>\n\n<p>In my case api.php is directly on the root of the website. Like http:\/\/mediawiki.example.com\/api.php. If you browse to your api.php, you get some help information, if it’s working.<\/p>\n\n<p><strong>LocalSettings.php <\/strong><\/p>\n\n<p>We have to add lines to the LocalSettings.php file of our Mediawiki installation.<\/p>\n\n<p>This Mediawiki installation is private. It’s like an intranet. You need userid and password to access it.<\/p>\n\n<p>This means that Parsoid needs to be authorized to access Mediawiki when it sends back to Mediawiki the result of the conversions it performs.<\/p>\n\n<p>This is what we do first thing in our LocalSettings.php file.<\/p>\n\n<p>The line with the URL to the Parsoid instance is interesting. It tells us that Parsoid is a server process listening on port 8142. Mediawiki will contact it at that port when needing to convert HTML code into Mediawiki syntax.<\/p>\n\n<p>Also the line about forwarding cookies is essential for Parsoid to work with a private Mediawiki installation.<\/p>\n\n<ol><li>\n\t<p><em>\/\/ Authorizing Parsoid to access Mediawiki<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><span>if<\/span> <span>(<\/span> <span>$_SERVER<\/span><span>[<\/span><span>'REMOTE_ADDR'<\/span><span>]<\/span> <span>==<\/span> <span>'127.0.0.1'<\/span> <span>||<\/span> <span>$_SERVER<\/span><span>[<\/span><span>'REMOTE_ADDR'<\/span><span>]<\/span> <span>==<\/span> <span>'localhost'<\/span> <span>)<\/span> <span>{<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <span>$wgGroupPermissions<\/span><span>[<\/span><span>'*'<\/span><span>]<\/span><span>[<\/span><span>'read'<\/span><span>]<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <span>$wgGroupPermissions<\/span><span>[<\/span><span>'*'<\/span><span>]<\/span><span>[<\/span><span>'edit'<\/span><span>]<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>}<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>wfLoadExtension<span>(<\/span> <span>'VisualEditor'<\/span> <span>)<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Enable by default for everybody<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgDefaultUserOptions<\/span><span>[<\/span><span>'visualeditor-enable'<\/span><span>]<\/span> <span>=<\/span> <span>1<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Optional: Set VisualEditor as the default for anonymous users<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ otherwise they will have to switch to VE<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ $wgDefaultUserOptions['visualeditor-editor'] = "visualeditor";<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Don't allow users to disable it<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgHiddenPrefs<\/span><span>[<\/span><span>]<\/span> <span>=<\/span> <span>'visualeditor-enable'<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ OPTIONAL: Enable VisualEditor's experimental code features<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgDefaultUserOptions<\/span><span>[<\/span><span>'visualeditor-enable-experimental'<\/span><span>]<\/span> <span>=<\/span> <span>1<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgVirtualRestConfig<\/span><span>[<\/span><span>'modules'<\/span><span>]<\/span><span>[<\/span><span>'parsoid'<\/span><span>]<\/span> <span>=<\/span> <span>array<\/span><span>(<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ URL to the Parsoid instance<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ Use port 8142 if you use the Debian package<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <span>'url'<\/span> <span>=&gt;<\/span> <span>'http:\/\/localhost:8142'<\/span><span>,<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ Parsoid "domain", see below (optional)<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/'domain' =&gt; 'localhost',<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ Parsoid "prefix", see below (optional)<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/'prefix' =&gt; 'localhost'<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>)<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em># This is for parsoid when it works, like in this case, on a private Mediawiki installation<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ This feature requires a non-locking session store. The default session store will not work and<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ will cause deadlocks (connection timeouts from Parsoid) when trying to use this feature.<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgSessionsInObjectCache<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Forward users' Cookie: headers to Parsoid. Required for private wikis (login required to read).<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ If the wiki is not private (i.e. $wgGroupPermissions[\u0027*']['read'] is true) this configuration<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ variable will be ignored.<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ WARNING: ONLY enable this on private wikis and ONLY IF you understand the SECURITY IMPLICATIONS<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ of sending Cookie headers to Parsoid over HTTP. For security reasons, it is strongly recommended<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ that $wgVirtualRestConfig['modules']['parsoid']['url'] be pointed to localhost if this setting is enabled.<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgVirtualRestConfig<\/span><span>[<\/span><span>'modules'<\/span><span>]<\/span><span>[<\/span><span>'parsoid'<\/span><span>]<\/span><span>[<\/span><span>'forwardCookies'<\/span><span>]<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n<\/ol><h2>Installing Visual Editor<\/h2>\n\n<p>To install Visual Editor, we need to follow the standard procedure.<\/p>\n\n<p>From the <a href="https:\/\/www.mediawiki.org\/wiki\/Special:ExtensionDistributor\/VisualEditor">Extension Distributor<\/a> we download Visual Editor for our Mediawiki version, 1.28.<\/p>\n\n<p>Then we extract it in our extension folder.<\/p>\n\n<p>Many lines need to be added to our LocalSettings.php file and you see them above.<\/p>\n\n<p>To be sure that the extension has been installed, we visit the Version page, for example https:\/\/mediawiki.example.com\/index.php?title=Special:Version.<\/p>\n\n<h2>Using Visual Editor<\/h2>\n\n<p>Visual Editor makes creating and editing tables much simpler. Mediawiki tables have a quite complicated syntax and it isn’t easy to edit them or add row and columns if you don’t have Visual Editor.<\/p>\n\n<p>Other functions are facilitated and enhanced wizards are available to perform most of them.<\/p>\n\n<p>There is a good <a href="https:\/\/www.mediawiki.org\/wiki\/Help:VisualEditor\/User_guide">user guide<\/a>.<\/p>\n\n<h2>Visual Editor problems<\/h2>\n\n<p>The are a few problems when using Visual Editor.<\/p>\n\n<p>It can be slow when staring editing. Sometimes I use the default editor. To do so, I just have to click on “edit source”.<\/p>\n\n<p>If you insert more than one code block in a page, they will disappear from the WYSIWYG view. You will have to switch to the default editor to edit them.<\/p>\n\n<p>This is a bug that may be solved in the future.<\/p>\n\n<p>Some pages can’t be edited using Visual Editor. You will have to use the default editor.<\/p>","langcode":"English","field_ems_topic":"Talking about my experiences","sticky":"Off","field_image":"\/sites\/default\/files\/2018-08\/VisualEditor4post.png"}]