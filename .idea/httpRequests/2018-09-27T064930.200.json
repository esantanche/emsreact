[
  {
    "nid": "84",
    "title": "Impossible to login to WordPress website",
    "body": "<p>The problem was that it was not possible to login to a WordPress website, to the admin dashboard I mean.<\/p>\n\n<p>I tried many things:<\/p>\n\n<ul><li>used scripts to reset the password. They actually change the pwd in the wp_user table. See below an example of update command used to change pwd.<\/li>\n\t<li>deleted cache plugins after having zipped them<\/li>\n\t<li>deleted cache folder, \/wp-content\/cache<\/li>\n\t<li>deactivated wp super cache plugin, which I had deleted before, by updating the option active_plugins in the table wp_options<\/li>\n\t<li>deleted anything related to caches in wp-config.php<\/li>\n\t<li>disabled all plugins by renaming the folder \/wp-content\/plugins<\/li>\n\t<li>enabled debugging<\/li>\n<\/ul><p>What worked was an upgrade from WordPress 3.9.1 to 4.4.2.<\/p>\n\n<p>I used these instructions: <a href="
    https:
    \
    /
    \
    /codex.wordpress.org
    \
    /Upgrading_WordPress_-_Extended_Instructions
    ">https:\/\/codex.wordpress.org\/Upgrading_WordPress_-_Extended_Instructions<\/a><\/p>\n\n<ol><li>\n\t<p><strong>USE<\/strong> name_of_your_database<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>UPDATE<\/strong> <span>`wp<strong>_<\/strong>users`<\/span> <strong>SET<\/strong> <span>`user<strong>_<\/strong>pass`<\/span><span>=<\/span> <span>MD5<\/span><span>(<\/span><span>'yourpassword'<\/span><span>)<\/span> <strong>WHERE<\/strong> <span>`user<strong>_<\/strong>login`<\/span><span>=<\/span><span>'yourusername'<\/span><span>;<\/span><\/p>\n\t<\/li>\n<\/ol>",
    "langcode": "English",
    "field_ems_topic": "Talking about my experiences",
    "sticky": "Off",
    "field_image": "\/sites\/default\/files\/2018-08\/Wordpress_login_troubleshooting.jpg"
  },
  {
    "nid": "83",
    "title": "Installing Open Project on Debian 8 server",
    "body": "<p>I’m going to install Open Project on a VPS (Virtual Private Server).<\/p>\n\n<h2>What is Open Project?<\/h2>\n\n<p><a href="
    https:
    \
    /
    \
    /www.openproject.org
    \
    /
    ">Open Project<\/a> is an open source application you can use to manage projects. It’s used for software projects.<\/p>\n\n<p>It supports Agile methodology, bug tracking and time tracking.<\/p>\n\n<p>I’ll use it to manage projects meant to build applications for my clients.<\/p>\n\n<p>I’ll describe here the procedure I followed to install Open Project on the Virtual Private Server where I run my own website and many others.<\/p>\n\n<h2>What do I need to perform the installation?<\/h2>\n\n<p>Of course a server. My VPS runs linux debian version 8.<\/p>\n\n<p>A web server as well. In my case I have nginx already installed and running. I use it instead of Apache for better performance. Nginx’s version is 1.6.2.<\/p>\n\n<p>A database. My server runs a mysql instance. Its version is 5.5.2.<\/p>\n\n<p>Other products will be installed.<\/p>\n\n<h2>Where did I find information about the installation procedure?<\/h2>\n\n<p>I used this procedure: <a href="
    https:
    \
    /
    \
    /github.com
    \
    /opf
    \
    /openproject
    \
    /blob
    \
    /stable
    \
    /7
    \
    /docs
    \
    /installation
    \
    /manual
    \
    /README.md
    ">Manual installation of OpenProject 7.0 with Apache on Ubuntu 14.04. LTS<\/a><\/p>\n\n<p>Since the procedure uses Apache, I had to find about how to configure nginx.<\/p>\n\n<p>I found these instructions: <a href="
    https:
    \
    /
    \
    /www.digitalocean.com
    \
    /community
    \
    /questions
    \
    /install-openproject-on-ubuntu-12-04-with-nginx
    ">Install OpenProject on Ubuntu 12.04 with nginx<\/a><\/p>\n\n<h2>Creating user and group<\/h2>\n\n<p>I need to create an user that will be running Open Project. This user will belong to a special group created on purpose for Open Project.<\/p>\n\n<p>Here I create the user openproject and the group of the same name. I also assign a password to the user.<\/p>\n\n<ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># groupadd openproject<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># useradd --create-home --gid openproject openproject<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># passwd openproject<\/em><\/p>\n\t<\/li>\n<\/ol><h2>Creating the database<\/h2>\n\n<p>Open Project needs a database where to store information.<\/p>\n\n<p>The database to create has name openproject. I create as well a myswl user of same name. Open Project will use it to access the database.<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p><strong>CREATE<\/strong> <strong>DATABASE<\/strong> openproject CHARACTER <strong>SET<\/strong> utf8<span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>CREATE<\/strong> <span>USER<\/span> <span>'openproject'<\/span>@<span>'localhost'<\/span> IDENTIFIED BY <span>'your password here'<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>GRANT<\/strong> <strong>ALL<\/strong> <strong>PRIVILEGES<\/strong> <strong>ON<\/strong> openproject.<span>*<\/span> <strong>TO<\/strong> <span>'openproject'<\/span>@<span>'localhost'<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>FLUSH <strong>PRIVILEGES<\/strong><span>;<\/span><\/p>\n\t<\/li>\n<\/ol><h2>Installing needed packages<\/h2>\n\n<p>For Open Project to work, I have to install many needed packages.<\/p>\n\n<p>Consider that the installation of bower may not be needed.<\/p>\n\n<p>Node.js, which provides the command npm, was already present on my server.<\/p\u003E\n\n<p> \n<\/p><ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get update<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get install build-essential<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get install -y libssl-dev libreadline-dev zlib1g-dev<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># apt-get install libmysqlclient-dev<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<em># npm install -g bower<\/em><\/p>\n\t<\/li>\n<\/ol><h2>Ruby on rails<\/h2>\n\n<p>Open Project is based on Ruby on Rails.<\/p>\n\n<p>I’ll use <a href="
    http:
    \
    /
    \
    /rbenv.org
    \
    /
    ">rbenv<\/a> to install a specific version of Ruby on Rails. Rbenv will be installed in the folder .rbenv under the home folder of the user openproject.<\/p>\n\n<p>Ruby-build is a plugin to be used by rbenv to install Ruby on Rails.<\/p>\n\n<p>The final “ruby –version” command shows that Ruby has been installed.<\/p>\n\n<p>I had to increase my server’s memory for the installation to work. It needs 1Gb of memory and 512Mb of swap.<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<em># su openproject --login<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>git clone<\/strong> https:<strong>\/\/<\/strong>github.com<strong>\/<\/strong>sstephenson<strong>\/<\/strong>rbenv.git ~<strong>\/<\/strong>.rbenv<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>echo<\/strong> <span>'export PATH="
    $HOME
    \
    /.rbenv
    \
    /bin: $PATH
    "'<\/span> <strong>&amp;<\/strong>gt;<strong>&amp;<\/strong>gt; ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>echo<\/strong> <span>'eval "
    $(rbenv
    init
    -)
    "'<\/span> <strong>&amp;<\/strong>gt;<strong>&amp;<\/strong>gt; ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>source<\/strong> ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>git clone<\/strong> https:<strong>\/\/<\/strong>github.com<strong>\/<\/strong>sstephenson<strong>\/<\/strong>ruby-build.git ~<strong>\/<\/strong>.rbenv<strong>\/<\/strong>plugins<strong>\/<\/strong>ruby-build<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>rbenv <strong>install<\/strong> 2.4.1<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>rbenv rehash<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>rbenv global 2.4.1<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span>ruby <span>--version<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>ruby 2.4.1p111 <strong>(<\/strong><span>2017<\/span>-03-<span>22<\/span> revision <span>58053<\/span><strong>)<\/strong> <strong>[<\/strong>x86_64-linux<strong>]<\/strong><\/p>\n\t<\/li>\n<\/ol><h2>Open Project<\/h2>\n\n<p>Now I’ll install Open Project itself.<\/p>\n\n<p>These are the commands I gave to install Open Project.<\/p>\n\n<p> \n<\/p><ol><li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>cd<\/strong> ~<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>git clone<\/strong> https:<strong>\/\/<\/strong>github.com<strong>\/<\/strong>opf<strong>\/<\/strong>openproject-ce.git <span>--branch<\/span> stable<strong>\/<\/strong><span>7<\/span> <span>--depth<\/span> <span>1<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>cd<\/strong> openproject-ce<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ gem <strong>install<\/strong> bundler<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ bundle <strong>install<\/strong> <span>--deployment<\/span> <span>--without<\/span> postgres sqlite development <strong>test<\/strong> therubyracer docker<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ npm <strong>install<\/strong><\/p>\n\t<\/li>\n<\/ol><h2>Configuring Open Project<\/h2>\n\n<p>Two files need to be configured.<\/p>\n\n<p>They are located in the folder \/home\/openproject\/openproject-ce\/config and their names are database.yml and configuration.yml.<\/p>\n\n<p>The file database.yml configures the access to the database. You have to specify the name of the database, the user Open Project uses to access mysql and the password.<\/p>\n\n<p>This information goes to the ‘production’ section.<\/p>\n\n<p>The file database.yml will look like this:\u003C\/p>\n\n<ol><li>\n\t<p>production:<\/p>\n\t<\/li>\n\t<li>\n\t<p>   adapter: mysql2<\/p>\n\t<\/li>\n\t<li>\n\t<p>   database: openproject<\/p>\n\t<\/li>\n\t<li>\n\t<p>   host: localhost<\/p>\n\t<\/li>\n\t<li>\n\t<p>   username: openproject<\/p>\n\t<\/li>\n\t<li>\n\t<p>   password: your password<\/p>\n\t<\/li>\n\t<li>\n\t<p>   encoding: utf8<\/p>\n\t<\/li>\n\t<li>\n\t<p>   variables:<\/p>\n\t<\/li>\n<\/ol><p>The file configuration.yml needs some settings so that Open Project can send emails.<\/p>\n\n<p>This heavily depends on the smtp service you use to send emails from your server. In this case I’m using Google GMail.<\/p>\n\n<p>This is the smtp section in configuration.yml:<\/p>\n\n<ol><li>\n\t<p>default:<\/p>\n\t<\/li>\n\t<li>\n\t<p>  # Outgoing emails configuration (see examples above)<\/p>\n\t<\/li>\n\t<li>\n\t<p>  email_delivery_method: :smtp<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_address: smtp.gmail.com<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_port: 587<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_domain: localhost<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_authentication: plain<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_user_name: "
    esantanche@gmail.com
    "<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_password: "
    your
    password
    here
    "<\/p>\n\t<\/li>\n\t<li>\n\t<p>  smtp_enable_starttls_auto: true<\/p>\n\t<\/li>\n<\/ol><p>To create database.yml and configuration.yml I used database.yml.example and configuration.yml.example. You find these files in the same folder as the one where database.yml and configuration.yml are located.<\/p>\n\n<h2>Completing Open Project installation<\/h2>\n\n<p>Now that Open Project knows about the database it has to use, I can proceed to create the tables and anything else Open Project needs inside the database.<\/p>\n\n<p>This is what I’m going to do know. During this phase I had to increase the server’s memory to 1Gb.<\/p>\n\n<ol><li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce<strong>\/<\/strong>config$ <strong>cd<\/strong> ~<strong>\/<\/strong>openproject-ce<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"
    production
    "<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake db:create<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"
    production
    "<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake db:migrate<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"
    production
    "<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake db:seed<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <span>RAILS_ENV<\/span>=<span>"
    production
    "<\/span> .<strong>\/<\/strong>bin<strong>\/<\/strong>rake assets:precompile<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <strong>echo<\/strong> <span>"
    export
    SECRET_KEY_BASE=<span>$(.
    \
    /bin
    \
    /rake
    secret)<
    \
    /span>
    "<\/span> <strong>&gt;&gt;<\/strong> ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ <strong>source<\/strong> ~<strong>\/<\/strong>.profile<\/p>\n\t<\/li>\n<\/ol><h2>Configuring nginx<\/h2>\n\n<p>To access the application I need to configure the webserver, in my case nginx.<\/p>\n\n<p>My job is simplified because I’m not installing Passenger, which is an application server that sits between the web server and ruby on rails. It’s purpose is to improve performances for installation with a lot of users. It’s not my case.<\/p>\n\n<p>Nginx will connect directly to the Ruby on Rails server.<\/p>\n\n<p>This is nginx configuration for Open Project:<\/p>\n\n<ol><li>\n\t<p># openproject  <\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>    # this is to redirect http requests to https ones<\/p>\n\t<\/li>\n\t<li>\n\t<p>    server {<\/p>\n\t<\/li>\n\t<li>\n\t<p>        listen         80;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        server_name    openproject.emanuelesantanche.com;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        return         301 https:\/\/$server_name$request_uri;<\/p>\n\t<\/li>\n\t<li>\n\t<p>    }<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>    upstream app_server {<\/p>\n\t<\/li>\n\t<li>\n\t<p>        server 127.0.0.1:3000 fail_timeout=0;<\/p>\n\t<\/li>\n\t<li>\n\t<p>    }<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>    server {<\/p>\n\t<\/li>\n\t<li>\n\t<p>        #listen 80;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        listen 443 ssl;<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        server_name openproject.emanuelesantanche.com;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        root \/home\/openproject\/openproject-ce\/public;<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        ssl_certificate \/etc\/letsencrypt\/live\/openproject.emanuelesantanche.com\/cert.pem;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        ssl_certificate_key \/etc\/letsencrypt\/live\/openproject.emanuelesantanche.com\/privkey.pem;<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        location \/ {<\/p>\n\t<\/li>\n\t<li>\n\t<p>               try_files $uri\/index.html $uri.html $uri @app;    <\/p>\n\t<\/li>\n\t<li>\n\t<p>        }<\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>        location @app {<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_set_header Host $http_host;<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_redirect off;<\/p>\n\t<\/li>\n\t<li>\n\t<p>                proxy_pass http:\/\/app_server;<\/p>\n\t<\/li>\n\t<li>\n\t<p>        }<\/p>\n\t<\/li>\n\t<li>\n\t<p>    }<\/p>\n\t<\/li>\n<\/ol><p>The configuration has been modified to use https with certificates provided by <a href="
    https:
    \
    /
    \
    /letsencrypt.org
    \
    /
    ">Let’s Encrypt<\/a>.<\/p>\n\n<h2>Starting Ruby on Rails<\/h2>\n\n<p>For the application to work, I have to start Ruby on Rails. It will listen on the port 3000.<\/p>\n\n<p>Nginx will communicate with it on the same port. You can see the port reference in nginx configuration.<\/p>\n\n<p>To start Ruby on Rails I do:<\/p>\n\n<ol><li>\n\t<p><span>root@FREEDOMANDCOURAGE:~# <\/span><strong>su<\/strong> openproject <span>--login<\/span>                                      <\/p>\n\t<\/li>\n\t<li>\n\t<p><span>openproject@FREEDOMANDCOURAGE:~$ <\/span><strong>cd<\/strong> ~<strong>\/<\/strong>openproject-ce                                        <\/p>\n\t<\/li>\n\t<li>\n\t<p>openproject<strong>@<\/strong>FREEDOMANDCOURAGE:~<strong>\/<\/strong>openproject-ce$ bundler <strong>exec<\/strong> rails server <span>-e<\/span> production <span>-d<\/span><\/p>\n\t<\/li>\n<\/ol><h2>Does it work?<\/h2>\n\n<p>Now I’m ready to test it!<\/p>\n\n<p>Nginx is configured to serve the application at the url openproject.emanuelesantanche.com.<\/p>\n\n<p>I went to my hosting provider’s control panel to configure the subdomain openproject.<\/p>\n\n<p>It’s also possible, just for a quick test, to associate the server’s ip address to openproject.emanuelesantanche.com in your local hosts file.<\/p>\n\n<p>I just open a browser at openproject.emanuelesantanche.com.<\/p>\n\n<p>It works!<\/p>\n\n<h2>Running jobs<\/h2>\n\n<p>Ruby on Rails needs to run some jobs periodically. A line in crontab will do it.<\/p>\n\n<p>Here it is:<\/p>\n\n<ol><li>\n\t<p>48 * * * * PATH=\/home\/openproject\/.rbenv\/shims:$PATH; cd \/home\/openproject\/openproject-ce; RAILS_ENV="
    production
    " .\/bin\/rake -q jobs:workoff &gt;\/dev\/null 2&gt;&amp;1<\/p>\n\t<\/li>\n<\/ol><p>In this case the crontab job gets executed once an hour. According to documentation, it should be run every minute.<\/p>",
    "langcode": "English",
    "field_ems_topic": "Talking about my experiences",
    "sticky": "Off",
    "field_image": "\/sites\/default\/files\/2018-08\/openproject-logo-1.png"
  },
  {
    "nid": "82",
    "title": "Use your smart-phone as webcam and keep enjoying enhanced security as well",
    "body": "<h2>What I want to do<\/h2>\n\n<p>I don’t want to buy a webcam for my computer. I have a smart-phone with both front and rear cameras. Can’t I use it as webcam?<\/p>\n\n<h2>Are you interested in Enhanced Security?<\/h2>\n\n<p>Maybe you are not interested in using your smart-phone as webcam.<\/p>\n\n<p>But you may be interested in Enhanced Security instead.<\/p>\n\n<p>If you are, keep reading because I’m going to tell you about SELinux, an additional level of security Linux servers, and desktops, enjoy.<\/p>\n\n<h2>The environment<\/h2>\n\n<p>The scenery where our troubleshooting is going to happen is a Linux Fedora desktop computer.<\/p>\n\n<p>It comes with SELinux installed and running by default.<\/p>\n\n<p>Precisely it’s Fedora 25. It’s using KDE Plasma as desktop environment. The desktop environment is irrelevant to our problem.<\/p>\n\n<h2>Droidcam<\/h2>\n\n<p>Droidcam is both an Android application and a Linux one. On the Linux side, Droidcam is written in C language and uses GTK as toolkit to create user interfaces. It can be used from the command line as well.<\/p>\n\n<p>You find the source code here: https:\/\/github.com\/aramg\/droidcam\/tree\/master\/linux.<\/p>\n\n<p>You install and run Droidcam on Linux and do the same on your Android smartphone. It’s simple, you just tell the Linux application what ip address it can find the smart-phone at.<\/p>\n\n<p>Droidcam uses port 4747. You may have to fix problems caused by firewalls if, like me, you have a firewall on your computer.<\/p>\n\n<h2>SELinux<\/h2>\n\n<p>SELinux adds security checks to your Linux computer. It makes more difficult for malware to infect the system. Linux is well-known for better security. SELinux adds even more security by isolating processes so that they don’t harm the system.<\/p>\n\n<h2>Why was Droidcam a problem?<\/h2>\n\n<p>You don’t find Droidcam in standard software repository. I downloaded it from https:\/\/www.dev47apps.com\/files\/600\/droidcam-64bit.tar.bz2.<\/p>\n\n<p>There is an ‘install’ script to run. It produces two modules the operating system will load when starting.<\/p>\n\n<p>The problem was that SELinux prevented the modules from starting complaining about lack of permission.<\/p>\n\n<p>I was getting these errors:<\/p>\n\n<ol><li>\n\t<p>Aug 12 07:31:58 localhost.localdomain systemd-modules-load[535]: Failed to insert 'videodev': Permission denied<\/p>\n\t<\/li>\n\t<li>\n\t<p>Aug 12 07:31:58 localhost.localdomain systemd-modules-load[535]: Failed to insert 'v4l2loopback_dc': Permission denied<\/p>\n\t<\/li>\n<\/ol><p>When you see this sort of errors, you may not think about SELinux. You think that there may be a common permission problem related to user permissions. That’s why it can be difficult to troubleshoot.<\/p>\n\n<h2>Disabling SELinux<\/h2>\n\n<p>To see if SELinux is a problem, you first disable it.<\/p>\n\n<p>You edit the file \/etc\/selinux\/config where you set SELINUX=disabled.<\/p>\n\n<p>Done this, the problem disappeared. But you are left with no Enhanced Security.<\/p>\n\n<h2>Using the audit log<\/h2>\n\n<p>SELinux registers every permission violation in a log called the audit log. You find it at this location: \/var\/log\/audit.<\/p>\n\n<p>In this case, our permission problem was logged in this way:<\/p>\n\n<ol><li>\n\t<p>type=AVC msg=audit(1502557651.920:115): avc:  denied  { module_load } for  pid=1028 comm="
    systemd-modules
    " scontext=system_u:system_r:systemd_modules_load_t:s0<\/p>\n\t<\/li>\n\t<li>\n\t<p>tcontext=system_u:system_r:systemd_modules_load_t:s0 tclass=system permissive=0<\/p>\n\t<\/li>\n<\/ol><h2>Now what?<\/h2>\n\n<p>Do I have to learn about SELinux now? Do I need to learn how to configure SELinux permissions? Do I need to read long instructions and manuals?<\/p>\n\n<p>Happily no, I don’t have to.<\/p>\n\n<p>SELinux comes with two very handy tools.<\/p>\n\n<p>The first one is audit2why. You feed it with the error message and it tells you what’s the problem.<\/p>\n\n<p>Let’s see<\/p>\n\n<ol><li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong> <strong>echo<\/strong> <span>"
    type=AVC
    msg=audit(1502557651.920: 115)
    :
    avc: denied
  {
    module_load
  }
  for
  pid=1028
  comm=
  "<\/span>systemd-modules<span>"
  scontext=system_u
  :
  system_r
  :
  systemd_modules_load_t
  :
  s0
  tcontext=system_u
  :
  system_r
  :
  systemd_modules_load_t
  :
  s0
  tclass=system
  permissive=0
  "<\/span> <strong>|<\/strong> audit2why<\/p>\n\t<\/li>\n\t<li>\n\t<p><span>type<\/span>=AVC <span>msg<\/span>=audit<strong>(<\/strong><span>1502557651.920<\/span>:<span>115<\/span><strong>)<\/strong>: avc:  denied  <strong>{<\/strong> module_load <strong>}<\/strong> <strong>for<\/strong>  <span>pid<\/span>=<span>1028<\/span> <span>comm<\/span>=systemd-modules <span>scontext<\/span>=system_u:system_r:systemd_modules_load_t:s0 <span>tcontext<\/span>=system_u:system_r:systemd_modules_load_t:s0 <span>tclass<\/span>=system <span>permissive<\/span>=<span>0<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>Was caused by:<\/p>\n\t<\/li>\n\t<li>\n\t<p>Missing <strong>type<\/strong> enforcement <strong>(<\/strong>TE<strong>)<\/strong> allow rule.<\/p>\n\t\u003C\/li>\n\t<li>\n\t<p>You can use audit2allow to generate a loadable module to allow this access.<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong><\/p>\n\t<\/li>\n<\/ol><p>The tool is telling us that a rule is missing. A rule that would allow the operation that has been denied, the latter being the loading operation of the module Droidcam installed.<\/p>\n\n<p>We are also advised to use another tool to generate that rule. Just to add to confusion, SELinux calls its rules modules. But a SELinux module is about giving permissions whilst a kernel module is about performing tasks like managing a webcam.<\/p>\n\n<p>The tool we need to use is audit2allow.<\/p>\n\n<p>Here it is:<\/p>\n\n<ol><li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong> <strong>echo<\/strong> <span>"
  type=AVC
  msg=audit(1502557651.920
  :
  115)
  :
  avc
  :
  denied
  {
    module_load
  }
  for
  pid=1028
  comm=
  "<\/span>systemd-modules<span>"
  scontext=system_u
  :
  system_r
  :
  systemd_modules_load_t
  :
  s0
  tcontext=system_u
  :
  system_r
  :
  systemd_modules_load_t
  :
  s0
  tclass=system
  permissive=0
  "<\/span> <strong>|<\/strong> audit2allow <span>-M<\/span> module_load_policy<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>********************<\/strong> IMPORTANT <strong>***********************<\/strong><\/p>\n\t<\/li>\n\t<li>\n\t<p>To <strong>make<\/strong> this policy package active, execute:<\/p>\n\t<\/li>\n\t<li>\n\t<p>semodule <span>-i<\/span> module_load_policy.pp<\/p>\n\t<\/li>\n\t<li>\n\t<p><strong>[<\/strong>esantanche<strong>@<\/strong>localhost<strong>]<\/strong>~<strong>%<\/strong> <strong>sudo<\/strong> semodule <span>-i<\/span> module_load_policy.pp<\/p>\n\t<\/li>\n<\/ol><p>The tool created the permission we need for Droidcam to work from the audit error above. No complicated configurations to do, no long manuals to learn. Just feed audit2allow with the error message and it will create a rule SELinux will use to allow Droidcam to work.<\/p>\n\n<p>Just consider that SELinux calls its permission rules modules and this may be confusing.<\/p>\n\n<h2>Conclusion<\/h2>\n\n<p>When you get strange permission errors you can’t explain and you eventually, after long investigation, realise it’s SELinux causing them, you want to get rid of SELinux.<\/p>\n\n<p>Why not just disable it? No mysterious permission errors any more.<\/p>\n\n<p>There are cases, like this one, that you are doing strange installations. Droidcam is a bit special and creates kernel modules its own way.<\/p>\n\n<p>Imagine that it was some malware installing modules. SELinux would have saved you from harm.<\/p>\n\n<p>It’s better to keep SELinux up and running and enjoy the enhanced security it offers.<\/p>\n\n<p>Happily it provides tools that make you job easier and you don’t have to learn complicated ways to configure permission rules.<\/p>",
  "langcode"
  :
  "English",
  "field_ems_topic"
  :
  "Talking about my experiences",
  "sticky"
  :
  "Off",
  "field_image"
  :
  "\/sites\/default\/files\/2018-08\/SELinux.png"
  },
  {
    "nid": "81",
    "title": "WYSIWYG editor for Mediawiki",
    "body": "<h2>What Mediawiki is and what it is for<\/h2>\n\n<p>Mediawiki is the engine that powers Wikipedia. It’s a wiki and it’s used to create collaborative websites where people can share knowledge and keep all sorts of information.<\/p>\n\n<p>They make it possible for people to work on the same document.<\/p>\n\n<p>Personally I keep most of my information in Mediawiki websites.<\/p>\n\n<p>Mediawiki is very good to create intranets, website used internally in an organization.<\/p>\n\n<h2>How to make editing easier<\/h2>\n\n<p>Many people find editing wiki pages difficult. Even if you get a standard tool bar and you don’t have to remember wiki syntax, there are some things that are difficult to edit and maintain.<\/p>\n\n<p>Tables are one of them. it’s easy to create a table because Mediawiki offers a wizard that guides you. But it’s not so easy to edit the table, to add rows and columns, to edit the content.<\/p>\n\n<h2>WYSIWYG editor<\/h2>\n\n<p>A WYSIWYG editor is, in general, an editor that makes it easier to work on a document.<\/p>\n\n<p>In our case a WYSIWYG editor hides Mediawiki syntax so that you don’t have to remember it at all. You just edit the document in the same way you would edit a document created with a word processor.<\/p>\n\n<h2>Visual editor<\/h2>\n\n<p>Visual Editor is our WYSIWYG editor. Wikipedia uses it as well.<\/p>\n\n<p>The starting point to find information about it is its <a href="
    https:
    \
    /
    \
    /www.mediawiki.org
    \
    /wiki
    \
    /Extension: VisualEditor
    ">Mediawiki extension page<\/a>.<\/p>\n\n<h2>Installing Parsoid<\/h2>\n\n<p>Before installing Visual Editor, we have to install Parsoid. It’s a server process that converts HTML code into Mediawiki syntax and back.<\/p>\n\n<p>The WYSIWYG editor works on HTML code. It keeps our editing activity in HTML form. But it has to eventually convert that HTML into Mediawiki syntax otherwise Mediawiki won’t be able to store it.<\/p>\n\n<p>When it has to save a page to Mediawiki database, Visual Editor takes the HTML version of the document and gives it to Parsoid. The latter converts it into Mediawiki syntax and Visual Editor gives that syntax to Mediawiki for it to store in the database.<\/p>\n\n<p><strong>The package<\/strong><\/p>\n\n<p>To install Parsoid we need to add a repository to our Debian software sources. My server runs Debian Jessie (version 8).<\/p>\n\n<ol><li>\n\t<p><strong>echo<\/strong> <span>"
    deb
    https:
    \
    /
    \
    /releases.wikimedia.org
    \
    /debian
    jessie-mediawiki
    main
    "<\/span> <strong>|<\/strong> <strong>sudo<\/strong> <strong>tee<\/strong> <strong>\/<\/strong>etc<strong>\/<\/strong>apt<strong>\/<\/strong>sources.list.d<strong>\/<\/strong>parsoid.list<\/p>\n\t<\/li>\n<\/ol><p>You may have to add an authentication key to access the repository. This is generally done with a command like the following one:<\/p>\n\n<ol><li>\n\t<p><strong>sudo<\/strong> <strong>apt-key<\/strong> advanced <span>--keyserver<\/span> keys.gnupg.net <span>--recv-keys<\/span> 90E9F83F22250DD7<\/p>\n\t<\/li>\n<\/ol><p\u003EThe actual key may be different.<\/p>\n\n<p>Now let’ install the package.<\/p>\n\n<ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<strong>\/<\/strong>sources.list.d<em># sudo apt-get update<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>etc<strong>\/<\/strong>apt<strong>\/<\/strong>sources.list.d<em># sudo apt-get install parsoid<\/em><\/p>\n\t<\/li>\n<\/ol><p>You may need to install the package apt-transport-https as well.<\/p>\n\n<h2>Configuring Parsoid<\/h2>\n\n<p>There are many files to configure for Parsoid to work.<\/p>\n\n<p><strong>Config.yaml<\/strong><\/p>\n\n<p>The main one if config.yaml (\/etc\/mediawiki\/parsoid\/config.yaml).<\/p>\n\n<p>You find there a line like this:<\/p>\n\n<ol><li>\n\t<p>http:\/\/localhost\/w\/api.php<\/p>\n\t<\/li>\n<\/ol><p>This is needed for Parsoid to access Mediawiki apis. Parsoid uses Mediawiki apis to return the result of the conversions it performs.<\/p>\n\n<p>I have many websites on my server. I need to replace localhost with my Mediawiki installation domain.<\/p>\n\n<p>Something like mediawiki.example.com. Your domain will be different.<\/p>\n\n<p>In my case api.php is directly on the root of the website. Like http:\/\/mediawiki.example.com\/api.php. If you browse to your api.php, you get some help information, if it’s working.<\/p>\n\n<p><strong>LocalSettings.php <\/strong><\/p>\n\n<p>We have to add lines to the LocalSettings.php file of our Mediawiki installation.<\/p>\n\n<p>This Mediawiki installation is private. It’s like an intranet. You need userid and password to access it.<\/p>\n\n<p>This means that Parsoid needs to be authorized to access Mediawiki when it sends back to Mediawiki the result of the conversions it performs.<\/p>\n\n<p>This is what we do first thing in our LocalSettings.php file.<\/p>\n\n<p>The line with the URL to the Parsoid instance is interesting. It tells us that Parsoid is a server process listening on port 8142. Mediawiki will contact it at that port when needing to convert HTML code into Mediawiki syntax.<\/p>\n\n<p>Also the line about forwarding cookies is essential for Parsoid to work with a private Mediawiki installation.<\/p>\n\n<ol><li>\n\t<p><em>\/\/ Authorizing Parsoid to access Mediawiki<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><span>if<\/span> <span>(<\/span> <span>$_SERVER<\/span><span>[<\/span><span>'REMOTE_ADDR'<\/span><span>]<\/span> <span>==<\/span> <span>'127.0.0.1'<\/span> <span>||<\/span> <span>$_SERVER<\/span><span>[<\/span><span>'REMOTE_ADDR'<\/span><span>]<\/span> <span>==<\/span> <span>'localhost'<\/span> <span>)<\/span> <span>{<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <span>$wgGroupPermissions<\/span><span>[<\/span><span>'*'<\/span><span>]<\/span><span>[<\/span><span>'read'<\/span><span>]<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <span>$wgGroupPermissions<\/span><span>[<\/span><span>'*'<\/span><span>]<\/span><span>[<\/span><span>'edit'<\/span><span>]<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>}<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p>wfLoadExtension<span>(<\/span> <span>'VisualEditor'<\/span> <span>)<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Enable by default for everybody<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgDefaultUserOptions<\/span><span>[<\/span><span>'visualeditor-enable'<\/span><span>]<\/span> <span>=<\/span> <span>1<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Optional: Set VisualEditor as the default for anonymous users<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ otherwise they will have to switch to VE<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ $wgDefaultUserOptions['visualeditor-editor'] = "
    visualeditor
    ";<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Don't allow users to disable it<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgHiddenPrefs<\/span><span>[<\/span><span>]<\/span> <span>=<\/span> <span>'visualeditor-enable'<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ OPTIONAL: Enable VisualEditor's experimental code features<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgDefaultUserOptions<\/span><span>[<\/span><span>'visualeditor-enable-experimental'<\/span><span>]<\/span> <span>=<\/span> <span>1<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgVirtualRestConfig<\/span><span>[<\/span><span>'modules'<\/span><span>]<\/span><span>[<\/span><span>'parsoid'<\/span><span>]<\/span> \u003Cspan>=<\/span> <span>array<\/span><span>(<\/span><\/p\u003E\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ URL to the Parsoid instance<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ Use port 8142 if you use the Debian package<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <span>'url'<\/span> <span>=&gt;<\/span> <span>'http:\/\/localhost:8142'<\/span><span>,<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ Parsoid "
    domain
    ", see below (optional)<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/'domain' =&gt; 'localhost',<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/ Parsoid "
    prefix
    ", see below (optional)<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>   <em>\/\/'prefix' =&gt; 'localhost'<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>)<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em># This is for parsoid when it works, like in this case, on a private Mediawiki installation<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ This feature requires a non-locking session store. The default session store will not work and<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ will cause deadlocks (connection timeouts from Parsoid) when trying to use this feature.<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgSessionsInObjectCache<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p> <\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ Forward users' Cookie: headers to Parsoid. Required for private wikis (login required to read).<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ If the wiki is not private (i.e. $wgGroupPermissions['*']['read'] is true) this configuration<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ variable will be ignored.<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ WARNING: ONLY enable this on private wikis and ONLY IF you understand the SECURITY IMPLICATIONS<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ of sending Cookie headers to Parsoid over HTTP. For security reasons, it is strongly recommended<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><em>\/\/ that $wgVirtualRestConfig['modules']['parsoid']['url'] be pointed to localhost if this setting is enabled.<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>$wgVirtualRestConfig<\/span><span>[<\/span><span>'modules'<\/span><span>]<\/span><span>[<\/span><span>'parsoid'<\/span><span>]<\/span><span>[<\/span><span>'forwardCookies'<\/span><span>]<\/span> <span>=<\/span> <strong>true<\/strong><span>;<\/span><\/p>\n\t<\/li>\n<\/ol><h2>Installing Visual Editor<\/h2>\n\n<p>To install Visual Editor, we need to follow the standard procedure.<\/p>\n\n<p>From the <a href="
    https:
    \
    /
    \
    /www.mediawiki.org
    \
    /wiki
    \
    /Special: ExtensionDistributor
    \
    /VisualEditor
    ">Extension Distributor<\/a> we download Visual Editor for our Mediawiki version, 1.28.<\/p>\n\n<p>Then we extract it in our extension folder.<\/p>\n\n<p>Many lines need to be added to our LocalSettings.php file and you see them above.<\/p>\n\n<p>To be sure that the extension has been installed, we visit the Version page, for example https:\/\/mediawiki.example.com\/index.php?title=Special:Version.<\/p>\n\n<h2>Using Visual Editor<\/h2>\n\n<p>Visual Editor makes creating and editing tables much simpler. Mediawiki tables have a quite complicated syntax and it isn’t easy to edit them or add row and columns if you don’t have Visual Editor.<\/p>\n\n<p>Other functions are facilitated and enhanced wizards are available to perform most of them.<\/p>\n\n<p>There is a good <a href="
    https:
    \
    /
    \
    /www.mediawiki.org
    \
    /wiki
    \
    /Help: VisualEditor
    \
    /User_guide
    ">user guide<\/a>.<\/p>\n\n<h2>Visual Editor problems<\/h2>\n\n<p>The are a few problems when using Visual Editor.<\/p>\n\n<p>It can be slow when staring editing. Sometimes I use the default editor. To do so, I just have to click on “edit source”.<\/p>\n\n<p>If you insert more than one code block in a page, they will disappear from the WYSIWYG view. You will have to switch to the default editor to edit them.<\/p>\n\n<p>This is a bug that may be solved in the future.<\/p>\n\n<p>Some pages can’t be edited using Visual Editor. You will have to use the default editor.<\/p>",
    "langcode": "English",
    "field_ems_topic": "Talking about my experiences",
    "sticky": "Off",
    "field_image": "\/sites\/default\/files\/2018-08\/VisualEditor4post.png"
  },
  {
    "nid": "80",
    "title": "Installing React Application",
    "body": "<h2>The goal<\/h2>\n\n<p>I’m installing React and many other modules needed for my application.<\/p>\n\n<p>The application will preform drag and drop operations and animations.<\/p>\n\n<p>It will use Material Design.<\/p>\n\n<h2>What is the application about?<\/h2>\n\n<p>It’s about displaying a list of products or other objects.<\/p>\n\n<p>Using drag and drop the user will be able to rank the product their own way.<\/p>\n\n<p>Their ranking will be stored locally so that the user will find it later, when they come to the website again.<\/p>\n\n<p>The application is work in progress and you see it here: <a href="
    http:
    \
    /
    \
    /rankit.emanuelesantanche.com
    \
    /
    ">RankIt Application<\/a>.<\/p>\n\n<h2>Let’s install React<\/h2>\n\n<p>I’ll use a tool built by Facebook developers.<\/p>\n\n<p>It’s called Create React App and saves you a lot of setup and configuration time.<\/p>\n\n<p>First I create a folder for my application and give it the right owner.<\/p>\n\n<ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<em># mkdir rankit.emanuelesantanche.com<\/em><\/p>\n\t<\/li>\n\t<li>\n\t\u003Cp>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<em># chown -R www-data:www-data rankit.emanuelesantanche.com\/<\/em><\/p>\n\t<\/li>\n<\/ol><p>The owner is www-data because the web server needs to be able to read and write in this folder.<\/p>\n\n<p>Now I use the tool create-react-app to create the React application.<\/p>\n\n<ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<strong>\/<\/strong>rankit.emanuelesantanche.com<em># npm install -g create-react-app<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<strong>\/<\/strong>rankit.emanuelesantanche.com<em># create-react-app rankitapp<\/em><\/p>\n\t<\/li>\n<\/ol><p>When running the command “create-react-app rankitapp”, I had to stop mysql, php and nginx to make it work because it needed a lot of memory.<\/p>\n\n<p>The command was eventually successful and this is what it told me:<\/p>\n\n<ol><li>\n\t<p>Success! Created rankitapp at \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp<\/p>\n\t<\/li>\n\t<li>\n\t<p>Inside that directory, you can run several commands:<\/p>\n\t<\/li>\n\t<li>\n\t<p>  npm start<\/p>\n\t<\/li>\n\t<li>\n\t<p>    Starts the development server.<\/p>\n\t<\/li>\n\t<li>\n\t<p>  npm run build<\/p>\n\t<\/li>\n\t<li>\n\t<p>    Bundles the app into static files for production.<\/p>\n\t<\/li>\n\t<li>\n\t<p>  npm test<\/p>\n\t<\/li>\n\t<li>\n\t<p>    Starts the test runner.<\/p>\n\t<\/li>\n\t<li>\n\t<p>  npm run eject<\/p>\n\t<\/li>\n\t<li>\n\t<p>    Removes this tool and copies build dependencies, configuration files<\/p>\n\t<\/li>\n\t<li>\n\t<p>    and scripts into the app directory. If you do this, you can’t go back!<\/p>\n\t<\/li>\n\t<li>\n\t<p>We suggest that you begin by typing:<\/p>\n\t<\/li>\n\t<li>\n\t<p>  cd rankitapp<\/p>\n\t<\/li>\n\t<li>\n\t<p>  npm start<\/p>\n\t<\/li>\n\t<li>\n\t<p>Happy hacking!<\/p>\n\t<\/li>\n<\/ol><h2>React Material Design<\/h2>\n\n<p>This application is supposed to use Material Design.<\/p>\n\n<p>I’m going to use a library called <a href="
    https:
    \
    /
    \
    /github.com
    \
    /mlaursen
    \
    /react-md
    ">React Material Design<\/a>.<\/p>\n\n<p>You can see it at work here: https:\/\/react-md.mlaursen.com\/<\/p>\n\n<p>On that website you find all the components you can use for your application.<\/p>\n\n<p>I’m going to use <a href="
    https:
    \
    /
    \
    /react-md.mlaursen.com
    \
    /components
    \
    /cards
    ">Cards<\/a> a lot.<\/p>\n\n<p>To use React Material Design, I need to install it.<\/p>\n\n<p>First of all I install the package react-md.<\/p>\n\n<ol><li>\n\t<p>\u003Cspan>root@FREEDOMANDCOURAGE:\/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp# <\/span>npm <strong>install<\/strong> <span>--save<\/span> react-md<\/p>\n\t<\/li>\n<\/ol><h2>CSS preprocessor<\/h2>\n\n<p>React Material Design comes with CSS sylesheets, but it uses a <a href="
    https:
    \
    /
    \
    /medium.com
    \
    /@cabot_solutions
    \
    /css-preprocessors-effective-tools-for-faster-styling-of-web-pages-and-user-interfaces-6ed4737a9804
    ">CSS preprocessor<\/a>.<\/p>\n\n<p>I have to install the preprocessor first.<\/p>\n\n<ol><li>\n\t<p><span>root@FREEDOMANDCOURAGE:\/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp# <\/span>npm <strong>install<\/strong> <span>--save<\/span> node-sass-chokidar<\/p>\n\t<\/li>\n<\/ol><p>I have to add a couple of line to the file \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/package.json.<\/p>\n\n<ol><li>\n\t<p>"
    build
    ": "
    react-scripts
    build
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>     "
    test
    ": "
    react-scripts
    test
    --env=jsdom
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>     "
    eject
    ": "
    react-scripts
    eject
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>+    "
    build-css
    ": "
    node-sass-chokidar
    --include-path
    .
    \
    /node_modules
    src
    \
    /
    -o
    src
    \
    /
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>+    "
    watch-css
    ": "
    npm
    run
    build-css
    &
    amp
    ;
    &
    amp
    ;
    npm
    run
    build-css
    --watch
    --recursive
    "<\/p>\n\t<\/li>\n\t<li>\n\t<p>   },<\/p>\n\t<\/li>\n\t<li>\n\t<p>   "
    devDependencies
    ": {<\/p>\n\t<\/li>\n\t<li>\n\t<p>     "
    babel-plugin-transform-decorators
    ": "
    ^6.24.1
    "<\/p>\n\t<\/li>\n<\/ol><p>The first line, the one with “build-css”, is how CSS files are produced from Scss ones. It’s how the preprocessor converts a Scss file into a standard CSS one.<\/p>\n\n<p>The second line, “watch-css”, is how the system realises that you changed a Scss file and performs again the conversion to a CSS file.<\/p>\n\n<p>To test that the precompiler is working we change name to two files.<\/p>\n\n<p>They are:<\/p>\n\n<p>* \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/src\/App.css<br \/>\n* \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/src\/index.css<\/p>\n\n<p>They become App.scss and index.scss respectively.<\/p>\n\n<p>I can do this change of name because these two files actually contain pure CSS the CSS preprocessor will convert literally.<\/p>\n\n<p>Now I run the script watch-css described above.<\/p>\n\n<ol><li>\n\t<p><span>root@FREEDOMANDCOURAGE:\/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp# <\/span>npm run watch-css<\/p>\n\t<\/li>\n<\/ol><p>This script will create the files App.css and index.css from App.scss and index.scss respectively.<\/p>\n\n<p>Then I want to prevent css files from being uploaded to my git repository because they will be generated from the scss files.<\/p>\n\n<p>I add these lines to my .gitignore.<\/p>\n\n<ol><li>\n\t<p><span>+<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+# build artifacts<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+src\/**\/*.css<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+<\/span><\/p>\n\t<\/li>\n<\/ol><p>You want to create this file: \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/src\/_globals.scss, and put the following content in it.<\/p>\n\n<ol><li>\n\t<p><span>@import 'react-md\/src\/scss\/react-md';<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>\/\/ Any variable overrides. The following just changes the <span>default<\/span> theme to use <span>teal<\/span> and purple.<\/p>\n\t<\/li>\n\t<li>\n\t<p>$md-primary-color<span>:<\/span> $md-teal-<span>500<\/span><span>;<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p>$md-secondary-color<span>:<\/span> $md-purple-a-<span>400<\/span><span>;<\/span><\/p>\n\t<\/li>\n<\/ol><p>By doing this, all the definitions included in React Material Design will be incorporated in our scss and used. We couldn’t use React Material Design if we don’t do this.<\/p>\n\n<p>The file \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/src\/index.scss needs a couple more lines:<\/p>\n\n<ol><li>\n\t<p><span>+@import 'globals';<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+@include react-md-everything<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+<\/span><\/p>\n\t<\/li>\n<\/ol><p>This step is necessary to actually use React Material Designin our application since the file _globals.scss is used internally, but not invoked in the actual application until we do it explicitly in index.scss.<\/p>\n\n<p>We want our scss files compiled in real time as we make changes. That’s why we need to fix our packages file (\/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/package.json).<\/p>\n\n<p>This is what the scripts part of it looks like:<\/p>\n\n<ol><li>\n\t<p>"
    scripts
    ": {<\/p>\n\t<\/li>\n\t<li>\n\t<p>    "
    start-js
    ": "
    react-scripts
    start
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>    "
    start
    ": "
    npm-run-all
    -p
    watch-css
    start-js
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>    "
    build
    ": "
    react-scripts
    build
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>    "
    test
    ": "
    react-scripts
    test
    --env=jsdom
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>    "
    eject
    ": "
    react-scripts
    eject
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>    "
    build-css
    ": "
    node-sass-chokidar
    --include-path
    .
    \
    /node_modules
    src
    \
    /
    -o
    src
    \
    /
    ",<\/p>\n\t<\/li>\n\t<li>\n\t<p>    "
    watch-css
    ": "
    npm
    run
    build-css
    &
    amp
    ;
    &
    amp
    ;
    npm
    run
    build-css
    --watch
    --recursive
    "<\/p>\n\t<\/li>\n\t<li>\n\t<p>  },<\/p>\n\t\u003C\/li>\n<\/ol><p>When we run “npm run start”, there will be two processes starting: watch-css and start-js. The first one will process scss file to css ones. The second will process javascript.<\/p>\n\n<p>For these scripts to work we need to install the package npm-run-all.<\/p>\n\n<ol><li>\n\t<p><span>root@FREEDOMANDCOURAGE:\/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp# <\/span>npm <strong>install<\/strong> <span>--save<\/span> npm-run-all<\/p>\n\t<\/li>\n<\/ol><h2>Web Font Loader<\/h2>\n\n<p>React Material Design uses some nice fonts, but we need to install Web Font Loader to be able to see them.<\/p>\n\n<ol><li>\n\t<p><span>root@FREEDOMANDCOURAGE:\/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp# <\/span>npm <strong>install<\/strong> <span>--save<\/span> webfontloader<\/p>\n\t<\/li>\n<\/ol><p>We have to add these lines to \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/src\/index.js otherwise we won’t use the fonts.<\/p>\n\n<ol><li>\n\t<p><span>+import WebFontLoader from 'webfontloader';<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+WebFontLoader.load<span>(<\/span><span>{<\/span><\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+  google: <span>{<\/span><\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+    families: <span>[<\/span>'Roboto:300,400,500,700', 'Material Icons'<span>]<\/span>,<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+  <span>}<\/span>,<\/span><\/p>\n\t<\/li>\n\t<li>\n\t<p><span>+<span>}<\/span><span>)<\/span>;<\/span><\/p>\n\t<\/li>\n<\/ol><h2>More packages to install<\/h2>\n\n<p>It’s simpler to install the other packages we need to do routing, perform animations and drag and drop.<\/p>\n\n<ol><li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<strong>\/<\/strong>rankit.emanuelesantanche.com<strong>\/<\/strong>rankitapp<em># npm install --save react-router-dom<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<strong>\/<\/strong>rankit.emanuelesantanche.com<strong>\/<\/strong>rankitapp<em># npm install --save react-dnd<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<strong>\/<\/strong>rankit.emanuelesantanche.com<strong>\/<\/strong>rankitapp<em># npm install --save react-dnd-html5-backend<\/em><\/p>\n\t<\/li>\n\t<li>\n\t<p>root<strong>@<\/strong>FREEDOMANDCOURAGE:<strong>\/<\/strong>srv<strong>\/<\/strong>sites<strong>\/<\/strong>rankit.emanuelesantanche.com\u003Cstrong>\/<\/strong>rankitapp<em># npm install --save react-motion<\/em><\/p>\n\t<\/li>\n<\/ol><p> <\/p>",
    "langcode": "English",
    "field_ems_topic": "Talking about my experiences",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-08\/react.png"
  },
  {
    "nid": "79",
    "title": "Serving static files in React",
    "body": "<h2>Some context<\/h2>\n\n<p>I’m building a React application. You can see the code in this Github repository: <a href="
    https:
    \
    /
    \
    /github.com
    \
    /esantanche
    \
    /rankit
    ">Rankit Github repository<\/a>.<\/p>\n\n<p>The live application is here: <a href="
    http:
    \
    /
    \
    /rankit.emanuelesantanche.com
    \
    /
    ">Rankit Application<\/a>.<\/p>\n\n<p>To create the environment from scratch I used the tool <a href="
    https:
    \
    /
    \
    /github.com
    \
    /facebookincubator
    \
    /create-react-app
    ">Create React App<\/a>.<\/p>\n\n<p>It’s easier and you don’t have to tamper with configuration files to make it work.<\/p>\n\n<p>It works out of the box.<\/p>\n\n<h2>What I want to do<\/h2>\n\n<p>I need to load the content of a text file into a variable.<\/p>\n\n<p>The text file contains a dictionary of words.<\/p>\n\n<h2>Restrictions<\/h2>\n\n<p>I want a solution that is as much in line with React as possible. The solution shouldn’t use tricks that don’t involve React.<\/p>\n\n<p>The web server configuration shouldn’t change.<\/p>\n\n<p>In my case the web server, nginx, just passes all http queries to the React application server running on port 3000. It doesn’t intercept any http query and doesn’t serve static files.<\/p>\n\n<p>Everything happens through React. I would like to keep it that way.<\/p>\n\n<p>I don’t want to copy and paste the file’s content into the code. I want to load the file dynamically when the program runs.<\/p>\n\n<p>I don’t want to change any configuration file Webpack uses. When you create a React application by using Create React App, it does the job for you.<\/p>\n\n<p>It configures Webpack and you are not supposed to touch the configuration. I don’t even know where it is and I don’t want to know.<\/p>\n\n<p>Additionally, it would be great to avoid having to install an additional server process to do the job.<\/p>\n\n<p>An additional tool that needs another server process to run may do the job, but it would definitely be overshot.<\/p>\n\n<h2>Why can’t I just import the file?<\/h2>\n\n<p>I discovered that I can install a loader. Webpack uses it to load a file directly into a variable.<\/p>\n\n<p>You would say that the problem is solved.<\/p>\n\n<p>I installed the loader using this command:<\/p>\n\n<ol><li>\n\t<p><span>root@FREEDOMANDCOURAGE:\/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp# <\/span>npm <strong>install<\/strong> <span>--save-dev<\/span> raw-loader<\/p>\n\t<\/li>\n<\/ol><p>Then I added this instruction to my application:<\/p>\n\n<ol><li>\n\t<p>import txt from 'raw-loader!.\/file.txt';<\/p>\n\t<\/li>\n<\/ol><p>I got this error message as well:<\/p>\n\n<ol><li>\n\t<p>Line 10:  Unexpected '!' in 'raw-loader!.\/file.txt'. Do not use import syntax to configure webpack loaders  import\/no-webpack-loader-syntax<\/p>\n\t<\/li>\n<\/ol>\u003Cp>This error message comes from one of the components Create React App installs when it creates the application for you.<\/p>\n\n<p>The component is ESLint. It parses your code to find patterns that may cause problems or that don’t comply to given guidelines.<\/p>\n\n<p>In this case ESLint is configured with a rule that forbids the use of webpack loaders in import statements.<\/p>\n\n<p>I can’t disable this rule because I should change ESLint configuration, which is part of the configuration that comes when you use the tool Create React App.<\/p>\n\n<p>Among the restrictions described above there is this one as well.<\/p>\n\n<h2>What about importing the file without using webpack loaders?<\/h2>\n\n<p>The idea is to use this statement:<\/p>\n\n<ol><li>\n\t<p>import txt from 'file.txt';<\/p>\n\t<\/li>\n<\/ol><p>After the import above runs, the variable txt won’t contain the file ‘file.txt’.<\/p>\n\n<p>It will contain a string that is actually a JavaScript statement like this one:<\/p>\n\n<ol><li>\n\t<p>module.exports = __webpack_public_path__ + "
    2c2ae068be3b089e0a5b59abb1831550.eot
    "<\/p>\n\t<\/li>\n<\/ol><p>I could use this statement in my code if the variable __webpack_public_path__ was defined.<\/p>\n\n<p>It looks like it isn’t and to have it defined I should change Webpack configuration, which thing I can’t do.<\/p>\n\n<h2>Can I use Node Express?<\/h2>\n\n<p>Express is a framework I can use as backend to perform many useful tasks.<\/p>\n\n<p>How to use it to serve static files is described <a href="
    https:
    \
    /
    \
    /medium.com
    \
    /@justintulk
    \
    /serving-static-html-into-a-react-component-using-node-express-8cb9fc9194df
    ">here<\/a><\/p>\n\n<p>Just I don’t want to add another server process if I can avoid it.<\/p>\n\n<p>It would consume a lot of resources.<\/p>\n\n<h2>Can I tell Webpack to use a specific loader when a file has a given extension?<\/h2>\n\n<p>It looks like this command:<\/p>\n\n<ol><li>\n\t<p>webpack <span>--module-bind<\/span> <span>'txt=raw-loader'<\/span><\/p>\n\t<\/li>\n<\/ol><p>would just associate text files with the raw loader.<\/p>\n\n<p>This means that I could just use this statement:<\/p>\n\n<ol><li>\n\t<p>import txt from 'file.txt';<\/p>\n\t<\/li>\n<\/ol><p>and Webpack would use the raw loader bypassing the syntax:<\/p>\n\n<ol><li>\n\t<p>import txt from 'raw-loader!.\/file.txt';<\/p>\n\t<\/li>\n<\/ol><p>which we know ESLint forbids.<\/p>\n\n<p>The problem is that the command ‘webpack’ is not installed and to install it we would have again to tamper with the configuration Create React App uses.<\/p>\n\n<h2>Let’s use the public folder!<\/h2>\n\n<p>Webpack treats a folder in a special way.<\/p>\n\n<p>It’s the public folder.<\/p>\n\n<p>If you put a file there, it’s not going to be transformed or moved.<\/p>\n\n<p>You can access it with a fetch statement and load it into a variable.<\/p>\n\n<p>The file dictionary.txt is in the public folder, which in our case is this folder: \/srv\/sites\/rankit.emanuelesantanche.com\/rankitapp\/public<\/p>\n\n<p>The following fetch statement loads that file and its full content is passed to a function, t9init, as parameter.<\/p>\n\n<ol><li>\n\t<p>fetch("
    dictionary.txt
    ")<\/p>\n\t<\/li>\n\t<li>\n\t<p>            .then((response) =&gt; response.text())<\/p>\n\t<\/li>\n\t<li>\n\t<p>            .then(function(data) {<\/p>\n\t<\/li>\n\t<li>\n\t<p>                t9init(data);     <\/p>\n\t<\/li>\n\t<li>\n\t<p>        })<\/p>\n\t<\/li>\n<\/ol><p>There is no need to specify the full url of the file because Webpack will prepend the url of the public folder.<\/p>\n\n<p>Actually, if you try to use a url in your fetch statement that you think may be correct, it won’t work.<\/p>\n\n<p>If you use these urls:<\/p>\n\n<ul><li>\/public\/dictionary.txt<\/li>\n\t<li>\/reactapp\/public\/dictionary.txt<\/li>\n\t<li>public\/dictionary.txt<\/li>\n\t<li>reactapp\/public\/dictionary.txt<\/li>\n<\/ul><p>it won’t work. If the file is in the public folder, just give its url relative to the public folder.<\/p>\n\n<p>This Webpack peculiarity may have misled you when you were trying to fetch the file by giving its url.<\/p>",
    "langcode": "English",
    "field_ems_topic": "Talking about my experiences",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-08\/Static_files_React.png"
  }
]