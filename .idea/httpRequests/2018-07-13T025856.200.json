[
  {
    "nid": "8",
    "title": "How do I protect my investment in bespoke software?",
    "body": "\u003Cp\u003EIt\u2019s not about money only. When we create something, we would like it not to go down the sink too quickly. Sure nothing lasts forever, but if what we create shows to be useful for as long as it can, all the better.\u003C\/p\u003E\n\n\u003Cp\u003EHow to do this when technologies crop up as quickly as mushrooms after a rain storm and disappear as quickly?\u003C\/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ESoftware development is about problem solving\u003C\/strong\u003E. It isn\u2019t about technologies.\u003C\/p\u003E\n\n\u003Cp\u003EWhen you write a piece of software, you are describing a way to solve a problem.\u003C\/p\u003E\n\n\u003Cp\u003EIf you document it well and your description of how to solve a problem is clear enough, when you have to change programming language, framework, libraries, or need to use the newest flavour of JavaScript, you have documented solutions that you can reuse.\u003C\/p\u003E\n\n\u003Cp\u003EYou don\u2019t need to throw everything away.\u003C\/p\u003E\n\n\u003Cp\u003EA well-documented and well-structured software not only is easier to modify, adapt and troubleshoot. It protects your investment because it documents a solution that is technology independent.\u003C\/p\u003E\n\n\u003Cp\u003EWhen you switch to a new technology, that solution comes with you.\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "On"
  },
  {
    "nid": "7",
    "title": "How do I create my application?",
    "body": "\u003Ch4\u003EHow do I create my application?\u003C\/h4\u003E\n\n\u003Cp\u003EWhat if you ask for my help? I created applications for: IBM, Intel Corporation, the Olympus satellite project, major telecommunication and energy companies, industrial plants, Virtual ISPs, banks and credit card companies.\u003C\/p\u003E\n\n\u003Cp\u003ESure, keep in mind that the age of the requirements sculpted in stone has long gone.\u003C\/p\u003E\n\n\u003Cp\u003EEven before the\u00a0\u003Ca href=\u0022http:\/\/agilemanifesto.org\/\u0022\u003Eagile manifesto\u003C\/a\u003E\u00a0I was changing, re-writing or even ignoring analysis documents written by world-renowned consulting firms.\u003C\/p\u003E\n\n\u003Cp\u003ENow you write a page of requirements and create a working prototype. That prototype will inspire you to make changes or add functions that you couldn\u2019t even think of when you were writing the requirements.\u003C\/p\u003E\n\n\u003Cp\u003EGet inspired by\u00a0\u003Ca href=\u0022http:\/\/gettingreal.37signals.com\/\u0022\u003EGetting Real\u003C\/a\u003E\u00a0for your next application. There you find a modern way of making software.\u003C\/p\u003E\n\n\u003Cp\u003ESoftware creation is problem solving. When you solve a problem you end up with a sequence of steps to be followed to solve the problem. The programming language you use doesn\u2019t matter. What matters is something that matters every time you want to solve a problem. The sequence of steps has to be very clear and easy to understand.\u003C\/p\u003E\n\n\u003Cp\u003EIf I want to solve the problem of going to Paris, I may say:\u003C\/p\u003E\n\n\u003Col\u003E\u003Cli\u003Ego to the St. Pancreas railway station\u003C\/li\u003E\n\t\u003Cli\u003Etake the train\u003C\/li\u003E\n\u003C\/ol\u003E\u003Cp\u003EYou may say that something is missing, I need a ticket.\u003C\/p\u003E\n\n\u003Cp\u003EAnd I reply that this is implied in the step no. 1. You will say that this can\u2019t be. Step no. 1 is only about going to the railway station. The purchase of a ticket can\u2019t be implied. You are right. Step no. 1 can\u2019t include something that is not explicitly declared otherwise it\u2019s a mess.\u003C\/p\u003E\n\n\u003Cp\u003EThe problem solving sequence gets confusing and improvements and troubleshooting gets hard to do. Unfortunately this scenario happens very often when writing software.\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "The tools I use",
    "sticky": "Off"
  },
  {
    "nid": "6",
    "title": "ca est le test en francasi",
    "body": "\u003Cp\u003Eici il y a le test\u003C\/p\u003E",
    "langcode": "French",
    "field_ems_topic": "Comment je travaille",
    "sticky": "Off"
  },
  {
    "nid": "6",
    "title": "How do I make my application easy to manage in production?",
    "body": "\u003Cp\u003EWhen you are in production, you don\u2019t have much time to fix bugs. If you are slow, you lose money and people remember that your website didn\u2019t work and don\u2019t come back.\u003C\/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EYou don\u2019t have time to understand cryptic error messages or to guess what to do to fix them\u003C\/strong\u003E.\u003C\/p\u003E\n\n\u003Cp\u003EYou don\u2019t have time to understand what a function does or what a variable contains. The original developer may be on holiday or she may not be able to remember what that variable was about if its name doesn\u2019t help.\u003C\/p\u003E\n\n\u003Cp\u003EA good structure helps too. If the software is easy to browse, errors are easier to find.\u003C\/p\u003E\n\n\u003Cp\u003EA production manual is a good idea.\u003C\/p\u003E\n\n\u003Cp\u003EI was managing a team whose goal was to design the production activities to be performed on a group of servers delivering virtual ISP services.\u003C\/p\u003E\n\n\u003Cp\u003EI knew that a production manual was what we needed to ensure a smooth operation.\u003C\/p\u003E\n\n\u003Cp\u003EEvery event was documented in the manual along with it\u2019s troubleshooting measures and the log of every case of occurrence.\u003C\/p\u003E\n\n\u003Cp\u003EIn many cases I have written such a high quality software that production was going on event-less. This is the case of my PLC software and the software I have written for Intel Corporation.\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "Off"
  }
]