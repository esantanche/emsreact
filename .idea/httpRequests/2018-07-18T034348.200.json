[
  {
    "nid": "12",
    "title": "CSS in JS",
    "body": "\u003Cp\u003EJSS is a more powerful abstraction over CSS. It uses JavaScript as a language to describe styles in a declarative and maintainable way. It is a high performance JS to CSS compiler which works at runtime and server-side. This core library is low level and framework agnostic. It is about 6KB (minified and gzipped) and is extensible via plugins API.\u003C\/p\u003E\n\n\u003Cp\u003EFeel free to ask any JSS related questions on twitter by using hashtag #cssinjs and mentioning @oleg008, watch my latest talk about \u0022Unique Value Proposition of CSSinJS\u0022 and try it on a playground.\u003C\/p\u003E\n\n\u003Cp\u003EIf you are a Sass (SCSS) user, this course will show how to express popular Sass language features using latest JavaScript features: Convert SCSS (Sass) to CSS-in-JS.\u003C\/p\u003E\n\n\u003Cp\u003ESee\u00a0\u003Ca href=\u0022http:\/\/cssinjs.org\/\u0022\u003Ehttp:\/\/cssinjs.org\/\u003C\/a\u003E\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "The tools I use",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/css-in-js.png"
  },
  {
    "nid": "11",
    "title": "JavaScript",
    "body": "\u003Cp\u003EJavaScript often abbreviated as JS, is a high-level, interpreted programming language. It is a language which is also characterized as dynamic, weakly typed, prototype-based and multi-paradigm.\u003C\/p\u003E\n\n\u003Cp\u003EAlongside HTML and CSS, JavaScript is one of the three core technologies of the World Wide Web.[8] JavaScript enables interactive web pages and thus is an essential part of web applications. The vast majority of websites use it,[9] and all major web browsers have a dedicated JavaScript engine to execute it.\u003C\/p\u003E\n\n\u003Cp\u003EAs a multi-paradigm language, JavaScript supports event-driven, functional, and imperative (including object-oriented and prototype-based) programming styles. It has an API for working with text, arrays, dates, regular expressions, and basic manipulation of the DOM, but the language itself does not include any I\/O, such as networking, storage, or graphics facilities, relying for these upon the host environment in which it is embedded.\u003C\/p\u003E\n\n\u003Cp\u003EInitially only implemented client-side in web browsers, JavaScript engines are now embedded in many other types of host software, including server-side in web servers and databases, and in non-web programs such as word processors and PDF software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets.\u003C\/p\u003E\n\n\u003Cp\u003EAlthough there are strong outward similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design; JavaScript was influenced by programming languages such as Self and Scheme. [10]\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "The tools I use",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/256px-JavaScript-logo.png"
  },
  {
    "nid": "10",
    "title": "HTML 5",
    "body": "\u003Cp\u003EHTML5\u00a0is a markup language used for structuring and presenting content on the World Wide Web. It is the fifth and current major version of the HTML standard.\u003C\/p\u003E\n\n\u003Cp\u003EIt was published in October 2014 by the World Wide Web Consortium (W3C)[2][4] to improve the language with support for the latest multimedia, while keeping it both easily readable by humans and consistently understood by computers and devices such as web browsers, parsers, etc. HTML5 is intended to subsume not only HTML 4, but also XHTML 1 and DOM Level 2 HTML.[5]\u003C\/p\u003E\n\n\u003Cp\u003EHTML5 includes detailed processing models to encourage more interoperable implementations; it extends, improves and rationalizes the markup available for documents, and introduces markup and application programming interfaces (APIs) for complex web applications.[6] For the same reasons, HTML5 is also a candidate for cross-platform mobile applications, because it includes features designed with low-powered devices in mind.\u003C\/p\u003E\n\n\u003Cp\u003EMany new syntactic features are included. To natively include and handle multimedia and graphical content, the new \u0026lt;video\u0026gt;, \u0026lt;audio\u0026gt; and \u0026lt;canvas\u0026gt; elements were added, and support for scalable vector graphics (SVG) content and MathML for mathematical formulas. To enrich the semantic content of documents, new page structure elements such as \u0026lt;main\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;nav\u0026gt; and \u0026lt;figure\u0026gt;, are added. New attributes are introduced, some elements and attributes have been removed, and others such as \u0026lt;a\u0026gt;, \u0026lt;cite\u0026gt; and \u0026lt;menu\u0026gt; have been changed, redefined or standardized.\u003C\/p\u003E\n\n\u003Cp\u003EThe APIs and Document Object Model (DOM) are now fundamental parts of the HTML5 specification[6] and HTML5 also better defines the processing for any invalid documents.[7]\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "The tools I use",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/HTML5_logo_and_wordmark.png"
  },
  {
    "nid": "9",
    "title": "React",
    "body": "\u003Cp\u003EReact is a JavaScript library that forces you to think in terms of components. This model of thinking fits user interfaces well. Depending on your background it might feel alien at first. You will have to think very carefully about the concept of state and where it belongs.\u003C\/p\u003E\n\n\u003Cp\u003EBecause state management is a difficult problem, a variety of solutions have appeared. In this book, we\u0027ll start by managing state ourselves and then push it to a Flux implementation known as Alt. There are also implementations available for several other alternatives, such as Redux, MobX, and Cerebral.\u003C\/p\u003E\n\n\u003Cp\u003EReact is pragmatic in the sense that it contains a set of escape hatches. If the React model doesn\u0027t work for you, it is still possible to revert back to something lower level. For instance, there are hooks that can be used to wrap older logic that relies on the DOM. This breaks the abstraction and ties your code to a specific environment, but sometimes that\u0027s the pragmatic thing to do.\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "The tools I use",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/react-logo.png"
  },
  {
    "nid": "8",
    "title": "How do I protect my investment in bespoke software?",
    "body": "\u003Cp\u003EIt\u2019s not about money only. When we create something, we would like it not to go down the sink too quickly. Sure nothing lasts forever, but if what we create shows to be useful for as long as it can, all the better.\u003C\/p\u003E\n\n\u003Cp\u003EHow to do this when technologies crop up as quickly as mushrooms after a rain storm and disappear as quickly?\u003C\/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ESoftware development is about problem solving\u003C\/strong\u003E. It isn\u2019t about technologies.\u003C\/p\u003E\n\n\u003Cp\u003EWhen you write a piece of software, you are describing a way to solve a problem.\u003C\/p\u003E\n\n\u003Cp\u003EIf you document it well and your description of how to solve a problem is clear enough, when you have to change programming language, framework, libraries, or need to use the newest flavour of JavaScript, you have documented solutions that you can reuse.\u003C\/p\u003E\n\n\u003Cp\u003EYou don\u2019t need to throw everything away.\u003C\/p\u003E\n\n\u003Cp\u003EA well-documented and well-structured software not only is easier to modify, adapt and troubleshoot. It protects your investment because it documents a solution that is technology independent.\u003C\/p\u003E\n\n\u003Cp\u003EWhen you switch to a new technology, that solution comes with you.\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/How_do_I_protect_my_investment_in_bespoke_software.jpg"
  },
  {
    "nid": "7",
    "title": "How do I create my application?",
    "body": "\u003Cp\u003EWhat if you ask for my help? I created applications for: IBM, Intel Corporation, the Olympus satellite project, major telecommunication and energy companies, industrial plants, Virtual ISPs, banks and credit card companies.\u003C\/p\u003E\n\n\u003Cp\u003ESure, keep in mind that the age of the requirements sculpted in stone has long gone.\u003C\/p\u003E\n\n\u003Cp\u003EEven before the\u00a0\u003Ca href=\u0022http:\/\/agilemanifesto.org\/\u0022\u003Eagile manifesto\u003C\/a\u003E\u00a0I was changing, re-writing or even ignoring analysis documents written by world-renowned consulting firms.\u003C\/p\u003E\n\n\u003Cp\u003ENow you write a page of requirements and create a working prototype. That prototype will inspire you to make changes or add functions that you couldn\u2019t even think of when you were writing the requirements.\u003C\/p\u003E\n\n\u003Cp\u003EGet inspired by\u00a0\u003Ca href=\u0022http:\/\/gettingreal.37signals.com\/\u0022\u003EGetting Real\u003C\/a\u003E\u00a0for your next application. There you find a modern way of making software.\u003C\/p\u003E\n\n\u003Cp\u003ESoftware creation is problem solving. When you solve a problem you end up with a sequence of steps to be followed to solve the problem. The programming language you use doesn\u2019t matter. What matters is something that matters every time you want to solve a problem. The sequence of steps has to be very clear and easy to understand.\u003C\/p\u003E\n\n\u003Cp\u003EIf I want to solve the problem of going to Paris, I may say:\u003C\/p\u003E\n\n\u003Col\u003E\u003Cli\u003Ego to the St. Pancreas railway station\u003C\/li\u003E\n\t\u003Cli\u003Etake the train\u003C\/li\u003E\n\u003C\/ol\u003E\u003Cp\u003EYou may say that something is missing, I need a ticket.\u003C\/p\u003E\n\n\u003Cp\u003EAnd I reply that this is implied in the step no. 1. You will say that this can\u2019t be. Step no. 1 is only about going to the railway station. The purchase of a ticket can\u2019t be implied. You are right. Step no. 1 can\u2019t include something that is not explicitly declared otherwise it\u2019s a mess.\u003C\/p\u003E\n\n\u003Cp\u003EThe problem solving sequence gets confusing and improvements and troubleshooting gets hard to do. Unfortunately this scenario happens very often when writing software.\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/How%20do%20I%20create%20my%20application%3F.jpg"
  },
  {
    "nid": "6",
    "title": "ca est le test en francais",
    "body": "\u003Cp\u003Eici il y a le test\u003C\/p\u003E",
    "langcode": "French",
    "field_ems_topic": "Comment je travaille",
    "sticky": "Off",
    "field_image": "\/sites\/default\/files\/2018-07\/How_do_I_make_my_application_easy_to_manage_in_production.jpg"
  },
  {
    "nid": "6",
    "title": "How do I make my application easy to manage in production?",
    "body": "\u003Cp\u003EWhen you are in production, you don\u2019t have much time to fix bugs. If you are slow, you lose money and people remember that your website didn\u2019t work and don\u2019t come back.\u003C\/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EYou don\u2019t have time to understand cryptic error messages or to guess what to do to fix them\u003C\/strong\u003E.\u003C\/p\u003E\n\n\u003Cp\u003EYou don\u2019t have time to understand what a function does or what a variable contains. The original developer may be on holiday or she may not be able to remember what that variable was about if its name doesn\u2019t help.\u003C\/p\u003E\n\n\u003Cp\u003EA good structure helps too. If the software is easy to browse, errors are easier to find.\u003C\/p\u003E\n\n\u003Cp\u003EA production manual is a good idea.\u003C\/p\u003E\n\n\u003Cp\u003EI was managing a team whose goal was to design the production activities to be performed on a group of servers delivering virtual ISP services.\u003C\/p\u003E\n\n\u003Cp\u003EI knew that a production manual was what we needed to ensure a smooth operation.\u003C\/p\u003E\n\n\u003Cp\u003EEvery event was documented in the manual along with it\u2019s troubleshooting measures and the log of every case of occurrence.\u003C\/p\u003E\n\n\u003Cp\u003EIn many cases I have written such a high quality software that production was going on event-less. This is the case of my PLC software and the software I have written for Intel Corporation.\u003C\/p\u003E",
    "langcode": "English",
    "field_ems_topic": "How I work",
    "sticky": "On",
    "field_image": "\/sites\/default\/files\/2018-07\/How_do_I_make_my_application_easy_to_manage_in_production.jpg"
  }
]